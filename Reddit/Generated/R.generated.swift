//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `FontSettingsTableViewController`, and contains static references to 1 segues.
    struct fontSettingsTableViewController {
      /// Segue identifier `selectFont`.
      static let selectFont: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FontSettingsTableViewController, SelectFontTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "selectFont")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `selectFont`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func selectFont(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FontSettingsTableViewController, SelectFontTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.fontSettingsTableViewController.selectFont, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `CacheSize`.
    static let cacheSize = _R.storyboard.cacheSize()
    /// Storyboard `Font`.
    static let font = _R.storyboard.font()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LinkSubmission`.
    static let linkSubmission = _R.storyboard.linkSubmission()
    /// Storyboard `Reminders`.
    static let reminders = _R.storyboard.reminders()
    /// Storyboard `SettingsStoryboard`.
    static let settingsStoryboard = _R.storyboard.settingsStoryboard()
    /// Storyboard `SubmitContainer`.
    static let submitContainer = _R.storyboard.submitContainer()
    /// Storyboard `SwipeConfiguration`.
    static let swipeConfiguration = _R.storyboard.swipeConfiguration()
    /// Storyboard `TextSubmission`.
    static let textSubmission = _R.storyboard.textSubmission()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CacheSize", bundle: ...)`
    static func cacheSize(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cacheSize)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Font", bundle: ...)`
    static func font(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.font)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LinkSubmission", bundle: ...)`
    static func linkSubmission(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.linkSubmission)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Reminders", bundle: ...)`
    static func reminders(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reminders)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SettingsStoryboard", bundle: ...)`
    static func settingsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SubmitContainer", bundle: ...)`
    static func submitContainer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.submitContainer)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SwipeConfiguration", bundle: ...)`
    static func swipeConfiguration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.swipeConfiguration)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TextSubmission", bundle: ...)`
    static func textSubmission(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.textSubmission)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 87 colors.
  struct color {
    /// Color `AdminTextDark`.
    static let adminTextDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "AdminTextDark")
    /// Color `AdminTextLight`.
    static let adminTextLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "AdminTextLight")
    /// Color `AdminText`.
    static let adminText = Rswift.ColorResource(bundle: R.hostingBundle, name: "AdminText")
    /// Color `Advanced Blue`.
    static let advancedBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Advanced Blue")
    /// Color `BackgroundBlack`.
    static let backgroundBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundBlack")
    /// Color `BackgroundDark`.
    static let backgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundDark")
    /// Color `BackgroundLight`.
    static let backgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundLight")
    /// Color `Background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background")
    /// Color `BlueDark`.
    static let blueDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueDark")
    /// Color `BlueLight`.
    static let blueLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueLight")
    /// Color `Favorite Add Background`.
    static let favoriteAddBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "Favorite Add Background")
    /// Color `Favorite Remove Background`.
    static let favoriteRemoveBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "Favorite Remove Background")
    /// Color `FocusedBackgroundDark`.
    static let focusedBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "FocusedBackgroundDark")
    /// Color `FocusedBackgroundLight`.
    static let focusedBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "FocusedBackgroundLight")
    /// Color `FocusedBackground`.
    static let focusedBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "FocusedBackground")
    /// Color `GrayDark`.
    static let grayDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "GrayDark")
    /// Color `GrayLight`.
    static let grayLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "GrayLight")
    /// Color `GroupedBackgroundBlack`.
    static let groupedBackgroundBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "GroupedBackgroundBlack")
    /// Color `GroupedBackgroundDark`.
    static let groupedBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "GroupedBackgroundDark")
    /// Color `GroupedBackgroundLight`.
    static let groupedBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "GroupedBackgroundLight")
    /// Color `GroupedBackground`.
    static let groupedBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "GroupedBackground")
    /// Color `HighlightBackgroundDark`.
    static let highlightBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "HighlightBackgroundDark")
    /// Color `HighlightBackgroundLight`.
    static let highlightBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "HighlightBackgroundLight")
    /// Color `HighlightBackground`.
    static let highlightBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "HighlightBackground")
    /// Color `LabelDark`.
    static let labelDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelDark")
    /// Color `LabelLight`.
    static let labelLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelLight")
    /// Color `LabelSecondary`.
    static let labelSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelSecondary")
    /// Color `LabelTertiary`.
    static let labelTertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelTertiary")
    /// Color `Label`.
    static let label = Rswift.ColorResource(bundle: R.hostingBundle, name: "Label")
    /// Color `LinkDark`.
    static let linkDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "LinkDark")
    /// Color `LinkLight`.
    static let linkLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "LinkLight")
    /// Color `ModeratorTextDark`.
    static let moderatorTextDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "ModeratorTextDark")
    /// Color `ModeratorTextLight`.
    static let moderatorTextLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "ModeratorTextLight")
    /// Color `ModeratorText`.
    static let moderatorText = Rswift.ColorResource(bundle: R.hostingBundle, name: "ModeratorText")
    /// Color `NsfwBackgroundDark`.
    static let nsfwBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "NsfwBackgroundDark")
    /// Color `NsfwBackgroundLight`.
    static let nsfwBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "NsfwBackgroundLight")
    /// Color `NsfwBackground`.
    static let nsfwBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "NsfwBackground")
    /// Color `NsfwTextDark`.
    static let nsfwTextDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "NsfwTextDark")
    /// Color `NsfwTextLight`.
    static let nsfwTextLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "NsfwTextLight")
    /// Color `NsfwText`.
    static let nsfwText = Rswift.ColorResource(bundle: R.hostingBundle, name: "NsfwText")
    /// Color `Off Red`.
    static let offRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "Off Red")
    /// Color `Off White`.
    static let offWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "Off White")
    /// Color `OrangeRedDark`.
    static let orangeRedDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangeRedDark")
    /// Color `OrangeRedLight`.
    static let orangeRedLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangeRedLight")
    /// Color `OrangeRed`.
    static let orangeRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangeRed")
    /// Color `PeriwinkleDark`.
    static let periwinkleDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "PeriwinkleDark")
    /// Color `PeriwinkleLight`.
    static let periwinkleLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "PeriwinkleLight")
    /// Color `Periwinkle`.
    static let periwinkle = Rswift.ColorResource(bundle: R.hostingBundle, name: "Periwinkle")
    /// Color `RedDark`.
    static let redDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedDark")
    /// Color `RedLight`.
    static let redLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedLight")
    /// Color `SecondaryBackgroundBlack`.
    static let secondaryBackgroundBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackgroundBlack")
    /// Color `SecondaryBackgroundDark`.
    static let secondaryBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackgroundDark")
    /// Color `SecondaryBackgroundLight`.
    static let secondaryBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackgroundLight")
    /// Color `SecondaryBackground`.
    static let secondaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackground")
    /// Color `SecondaryGroupedBackgroundBlack`.
    static let secondaryGroupedBackgroundBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryGroupedBackgroundBlack")
    /// Color `SecondaryGroupedBackgroundDark`.
    static let secondaryGroupedBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryGroupedBackgroundDark")
    /// Color `SecondaryGroupedBackgroundLight`.
    static let secondaryGroupedBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryGroupedBackgroundLight")
    /// Color `SecondaryGroupedBackground`.
    static let secondaryGroupedBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryGroupedBackground")
    /// Color `SecondaryLabelDark`.
    static let secondaryLabelDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryLabelDark")
    /// Color `SecondaryLabelLight`.
    static let secondaryLabelLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryLabelLight")
    /// Color `SelectedRowColorDark`.
    static let selectedRowColorDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "SelectedRowColorDark")
    /// Color `SelectedRowColorLight`.
    static let selectedRowColorLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "SelectedRowColorLight")
    /// Color `SelectedRowColor`.
    static let selectedRowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SelectedRowColor")
    /// Color `SeparatorBlack`.
    static let separatorBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SeparatorBlack")
    /// Color `SeparatorLightBlack`.
    static let separatorLightBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SeparatorLightBlack")
    /// Color `SubmitterTextDark`.
    static let submitterTextDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "SubmitterTextDark")
    /// Color `SubmitterTextLight`.
    static let submitterTextLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "SubmitterTextLight")
    /// Color `SubmitterText`.
    static let submitterText = Rswift.ColorResource(bundle: R.hostingBundle, name: "SubmitterText")
    /// Color `Subscribtion Add Background`.
    static let subscribtionAddBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "Subscribtion Add Background")
    /// Color `SwipeBrown`.
    static let swipeBrown = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwipeBrown")
    /// Color `SwipeGreen`.
    static let swipeGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwipeGreen")
    /// Color `SwipePurple`.
    static let swipePurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwipePurple")
    /// Color `SwipeRed`.
    static let swipeRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwipeRed")
    /// Color `SwipeYellow`.
    static let swipeYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwipeYellow")
    /// Color `TertiaryBackgroundBlack`.
    static let tertiaryBackgroundBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryBackgroundBlack")
    /// Color `TertiaryBackgroundDark`.
    static let tertiaryBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryBackgroundDark")
    /// Color `TertiaryBackgroundLight`.
    static let tertiaryBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryBackgroundLight")
    /// Color `TertiaryBackground`.
    static let tertiaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryBackground")
    /// Color `TertiaryGroupedBackgroundBlack`.
    static let tertiaryGroupedBackgroundBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryGroupedBackgroundBlack")
    /// Color `TertiaryGroupedBackgroundDark`.
    static let tertiaryGroupedBackgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryGroupedBackgroundDark")
    /// Color `TertiaryGroupedBackgroundLight`.
    static let tertiaryGroupedBackgroundLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryGroupedBackgroundLight")
    /// Color `TertiaryGroupedBackground`.
    static let tertiaryGroupedBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryGroupedBackground")
    /// Color `TertiaryLabelDark`.
    static let tertiaryLabelDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryLabelDark")
    /// Color `TertiaryLabelLight`.
    static let tertiaryLabelLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "TertiaryLabelLight")
    /// Color `separatorDark`.
    static let separatorDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "separatorDark")
    /// Color `separatorLight`.
    static let separatorLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "separatorLight")
    /// Color `separator`.
    static let separator = Rswift.ColorResource(bundle: R.hostingBundle, name: "separator")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AdminText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func adminText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.adminText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AdminTextDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func adminTextDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.adminTextDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AdminTextLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func adminTextLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.adminTextLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Advanced Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func advancedBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.advancedBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Favorite Add Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func favoriteAddBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.favoriteAddBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Favorite Remove Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func favoriteRemoveBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.favoriteRemoveBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FocusedBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func focusedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.focusedBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FocusedBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func focusedBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.focusedBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FocusedBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func focusedBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.focusedBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GrayDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GrayLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GroupedBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func groupedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.groupedBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GroupedBackgroundBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func groupedBackgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.groupedBackgroundBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GroupedBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func groupedBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.groupedBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GroupedBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func groupedBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.groupedBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "HighlightBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func highlightBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.highlightBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "HighlightBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func highlightBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.highlightBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "HighlightBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func highlightBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.highlightBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Label", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelSecondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelTertiary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelTertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelTertiary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LinkDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func linkDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.linkDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LinkLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func linkLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.linkLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ModeratorText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func moderatorText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.moderatorText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ModeratorTextDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func moderatorTextDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.moderatorTextDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ModeratorTextLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func moderatorTextLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.moderatorTextLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NsfwBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nsfwBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nsfwBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NsfwBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nsfwBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nsfwBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NsfwBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nsfwBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nsfwBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NsfwText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nsfwText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nsfwText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NsfwTextDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nsfwTextDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nsfwTextDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NsfwTextLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nsfwTextLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nsfwTextLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Off Red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func offRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.offRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Off White", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func offWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.offWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangeRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangeRedDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeRedDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeRedDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangeRedLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeRedLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeRedLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Periwinkle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func periwinkle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.periwinkle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PeriwinkleDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func periwinkleDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.periwinkleDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PeriwinkleLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func periwinkleLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.periwinkleLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackgroundBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackgroundBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryGroupedBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryGroupedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryGroupedBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryGroupedBackgroundBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryGroupedBackgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryGroupedBackgroundBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryGroupedBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryGroupedBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryGroupedBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryGroupedBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryGroupedBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryGroupedBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryLabelDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryLabelDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryLabelDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryLabelLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryLabelLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryLabelLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SelectedRowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedRowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedRowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SelectedRowColorDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedRowColorDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedRowColorDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SelectedRowColorLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedRowColorLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedRowColorLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SeparatorBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SeparatorLightBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorLightBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorLightBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SubmitterText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func submitterText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.submitterText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SubmitterTextDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func submitterTextDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.submitterTextDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SubmitterTextLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func submitterTextLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.submitterTextLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Subscribtion Add Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subscribtionAddBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subscribtionAddBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwipeBrown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func swipeBrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.swipeBrown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwipeGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func swipeGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.swipeGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwipePurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func swipePurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.swipePurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwipeRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func swipeRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.swipeRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwipeYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func swipeYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.swipeYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryBackgroundBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryBackgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryBackgroundBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryGroupedBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryGroupedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryGroupedBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryGroupedBackgroundBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryGroupedBackgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryGroupedBackgroundBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryGroupedBackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryGroupedBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryGroupedBackgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryGroupedBackgroundLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryGroupedBackgroundLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryGroupedBackgroundLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryLabelDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryLabelDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryLabelDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TertiaryLabelLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tertiaryLabelLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tertiaryLabelLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separatorDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separatorLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorLight, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 44 files.
  struct file {
    /// Resource file `Alpha@2x.png`.
    static let alpha2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Alpha@2x", pathExtension: "png")
    /// Resource file `Alpha@3x.png`.
    static let alpha3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Alpha@3x", pathExtension: "png")
    /// Resource file `Black@2x.png`.
    static let black2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Black@2x", pathExtension: "png")
    /// Resource file `Black@3x.png`.
    static let black3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Black@3x", pathExtension: "png")
    /// Resource file `BlackIpad@2x.png`.
    static let blackIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "BlackIpad@2x", pathExtension: "png")
    /// Resource file `BlackIpad@3x.png`.
    static let blackIpad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "BlackIpad@3x", pathExtension: "png")
    /// Resource file `Bling@2x.png`.
    static let bling2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Bling@2x", pathExtension: "png")
    /// Resource file `Bling@3x.png`.
    static let bling3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Bling@3x", pathExtension: "png")
    /// Resource file `BlingIpad@2x.png`.
    static let blingIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "BlingIpad@2x", pathExtension: "png")
    /// Resource file `BlingIpad@3x.png`.
    static let blingIpad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "BlingIpad@3x", pathExtension: "png")
    /// Resource file `Comic Sans MS Bold.ttf`.
    static let comicSansMSBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Comic Sans MS Bold", pathExtension: "ttf")
    /// Resource file `Comic Sans MS.ttf`.
    static let comicSansMSTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Comic Sans MS", pathExtension: "ttf")
    /// Resource file `ElegantIcons.ttf`.
    static let elegantIconsTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ElegantIcons", pathExtension: "ttf")
    /// Resource file `Inter-UI-Bold.ttf`.
    static let interUIBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-UI-Bold", pathExtension: "ttf")
    /// Resource file `Inter-UI-BoldItalic.ttf`.
    static let interUIBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-UI-BoldItalic", pathExtension: "ttf")
    /// Resource file `Inter-UI-Italic.ttf`.
    static let interUIItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-UI-Italic", pathExtension: "ttf")
    /// Resource file `Inter-UI-Medium.ttf`.
    static let interUIMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-UI-Medium", pathExtension: "ttf")
    /// Resource file `Inter-UI-MediumItalic.ttf`.
    static let interUIMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-UI-MediumItalic", pathExtension: "ttf")
    /// Resource file `Inter-UI-Regular.ttf`.
    static let interUIRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-UI-Regular", pathExtension: "ttf")
    /// Resource file `Material@2x.png`.
    static let material2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Material@2x", pathExtension: "png")
    /// Resource file `Material@3x.png`.
    static let material3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Material@3x", pathExtension: "png")
    /// Resource file `MaterialIpad@2x.png`.
    static let materialIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "MaterialIpad@2x", pathExtension: "png")
    /// Resource file `MaterialIpad@3x.png`.
    static let materialIpad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "MaterialIpad@3x", pathExtension: "png")
    /// Resource file `Neon@2x.png`.
    static let neon2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Neon@2x", pathExtension: "png")
    /// Resource file `Neon@3x.png`.
    static let neon3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Neon@3x", pathExtension: "png")
    /// Resource file `NeonIpad@2x.png`.
    static let neonIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "NeonIpad@2x", pathExtension: "png")
    /// Resource file `Neonipad@3x.png`.
    static let neonipad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Neonipad@3x", pathExtension: "png")
    /// Resource file `Night Sky@2x.png`.
    static let nightSky2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Night Sky@2x", pathExtension: "png")
    /// Resource file `Night Sky@3x.png`.
    static let nightSky3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Night Sky@3x", pathExtension: "png")
    /// Resource file `Night SkyIpad@2x.png`.
    static let nightSkyIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Night SkyIpad@2x", pathExtension: "png")
    /// Resource file `Night SkyIpad@3x.png`.
    static let nightSkyIpad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Night SkyIpad@3x", pathExtension: "png")
    /// Resource file `Parchment@2x.png`.
    static let parchment2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Parchment@2x", pathExtension: "png")
    /// Resource file `Parchment@3x.png`.
    static let parchment3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Parchment@3x", pathExtension: "png")
    /// Resource file `ParchmentIpad@2x.png`.
    static let parchmentIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ParchmentIpad@2x", pathExtension: "png")
    /// Resource file `ParchmentIpad@3x.png`.
    static let parchmentIpad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ParchmentIpad@3x", pathExtension: "png")
    /// Resource file `Pe-icon-7-stroke.ttf`.
    static let peIcon7StrokeTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Pe-icon-7-stroke", pathExtension: "ttf")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Shadow@2x.png`.
    static let shadow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Shadow@2x", pathExtension: "png")
    /// Resource file `Shadow@3x.png`.
    static let shadow3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Shadow@3x", pathExtension: "png")
    /// Resource file `ShadowIpad@2x.png`.
    static let shadowIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ShadowIpad@2x", pathExtension: "png")
    /// Resource file `ShadowIpad@3x.png`.
    static let shadowIpad3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ShadowIpad@3x", pathExtension: "png")

    /// `bundle.url(forResource: "Alpha@2x", withExtension: "png")`
    static func alpha2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alpha2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alpha@3x", withExtension: "png")`
    static func alpha3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alpha3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Black@2x", withExtension: "png")`
    static func black2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.black2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Black@3x", withExtension: "png")`
    static func black3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.black3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BlackIpad@2x", withExtension: "png")`
    static func blackIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blackIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BlackIpad@3x", withExtension: "png")`
    static func blackIpad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blackIpad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Bling@2x", withExtension: "png")`
    static func bling2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bling2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Bling@3x", withExtension: "png")`
    static func bling3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bling3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BlingIpad@2x", withExtension: "png")`
    static func blingIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blingIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BlingIpad@3x", withExtension: "png")`
    static func blingIpad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blingIpad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Comic Sans MS Bold", withExtension: "ttf")`
    static func comicSansMSBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comicSansMSBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Comic Sans MS", withExtension: "ttf")`
    static func comicSansMSTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comicSansMSTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ElegantIcons", withExtension: "ttf")`
    static func elegantIconsTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.elegantIconsTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-UI-Bold", withExtension: "ttf")`
    static func interUIBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interUIBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-UI-BoldItalic", withExtension: "ttf")`
    static func interUIBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interUIBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-UI-Italic", withExtension: "ttf")`
    static func interUIItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interUIItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-UI-Medium", withExtension: "ttf")`
    static func interUIMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interUIMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-UI-MediumItalic", withExtension: "ttf")`
    static func interUIMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interUIMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-UI-Regular", withExtension: "ttf")`
    static func interUIRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interUIRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Material@2x", withExtension: "png")`
    static func material2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.material2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Material@3x", withExtension: "png")`
    static func material3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.material3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MaterialIpad@2x", withExtension: "png")`
    static func materialIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MaterialIpad@3x", withExtension: "png")`
    static func materialIpad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIpad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Neon@2x", withExtension: "png")`
    static func neon2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neon2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Neon@3x", withExtension: "png")`
    static func neon3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neon3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NeonIpad@2x", withExtension: "png")`
    static func neonIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neonIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Neonipad@3x", withExtension: "png")`
    static func neonipad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neonipad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Night Sky@2x", withExtension: "png")`
    static func nightSky2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightSky2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Night Sky@3x", withExtension: "png")`
    static func nightSky3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightSky3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Night SkyIpad@2x", withExtension: "png")`
    static func nightSkyIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightSkyIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Night SkyIpad@3x", withExtension: "png")`
    static func nightSkyIpad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightSkyIpad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Parchment@2x", withExtension: "png")`
    static func parchment2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.parchment2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Parchment@3x", withExtension: "png")`
    static func parchment3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.parchment3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ParchmentIpad@2x", withExtension: "png")`
    static func parchmentIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.parchmentIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ParchmentIpad@3x", withExtension: "png")`
    static func parchmentIpad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.parchmentIpad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Pe-icon-7-stroke", withExtension: "ttf")`
    static func peIcon7StrokeTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.peIcon7StrokeTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shadow@2x", withExtension: "png")`
    static func shadow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shadow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shadow@3x", withExtension: "png")`
    static func shadow3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shadow3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ShadowIpad@2x", withExtension: "png")`
    static func shadowIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shadowIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ShadowIpad@3x", withExtension: "png")`
    static func shadowIpad3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shadowIpad3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 13 fonts.
  struct font: Rswift.Validatable {
    /// Font `ComicSansMS-Bold`.
    static let comicSansMSBold = Rswift.FontResource(fontName: "ComicSansMS-Bold")
    /// Font `ComicSansMS`.
    static let comicSansMS = Rswift.FontResource(fontName: "ComicSansMS")
    /// Font `ElegantIcons`.
    static let elegantIcons = Rswift.FontResource(fontName: "ElegantIcons")
    /// Font `InterUI-BoldItalic`.
    static let interUIBoldItalic = Rswift.FontResource(fontName: "InterUI-BoldItalic")
    /// Font `InterUI-Bold`.
    static let interUIBold = Rswift.FontResource(fontName: "InterUI-Bold")
    /// Font `InterUI-Italic`.
    static let interUIItalic = Rswift.FontResource(fontName: "InterUI-Italic")
    /// Font `InterUI-MediumItalic`.
    static let interUIMediumItalic = Rswift.FontResource(fontName: "InterUI-MediumItalic")
    /// Font `InterUI-Medium`.
    static let interUIMedium = Rswift.FontResource(fontName: "InterUI-Medium")
    /// Font `InterUI-Regular`.
    static let interUIRegular = Rswift.FontResource(fontName: "InterUI-Regular")
    /// Font `Pe-icon-7-stroke`.
    static let peIcon7Stroke = Rswift.FontResource(fontName: "Pe-icon-7-stroke")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")

    /// `UIFont(name: "ComicSansMS", size: ...)`
    static func comicSansMS(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: comicSansMS, size: size)
    }

    /// `UIFont(name: "ComicSansMS-Bold", size: ...)`
    static func comicSansMSBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: comicSansMSBold, size: size)
    }

    /// `UIFont(name: "ElegantIcons", size: ...)`
    static func elegantIcons(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: elegantIcons, size: size)
    }

    /// `UIFont(name: "InterUI-Bold", size: ...)`
    static func interUIBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interUIBold, size: size)
    }

    /// `UIFont(name: "InterUI-BoldItalic", size: ...)`
    static func interUIBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interUIBoldItalic, size: size)
    }

    /// `UIFont(name: "InterUI-Italic", size: ...)`
    static func interUIItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interUIItalic, size: size)
    }

    /// `UIFont(name: "InterUI-Medium", size: ...)`
    static func interUIMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interUIMedium, size: size)
    }

    /// `UIFont(name: "InterUI-MediumItalic", size: ...)`
    static func interUIMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interUIMediumItalic, size: size)
    }

    /// `UIFont(name: "InterUI-Regular", size: ...)`
    static func interUIRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interUIRegular, size: size)
    }

    /// `UIFont(name: "Pe-icon-7-stroke", size: ...)`
    static func peIcon7Stroke(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: peIcon7Stroke, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    static func validate() throws {
      if R.font.comicSansMS(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ComicSansMS' could not be loaded, is 'Comic Sans MS.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.comicSansMSBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ComicSansMS-Bold' could not be loaded, is 'Comic Sans MS Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.elegantIcons(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ElegantIcons' could not be loaded, is 'ElegantIcons.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interUIBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'InterUI-Bold' could not be loaded, is 'Inter-UI-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interUIBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'InterUI-BoldItalic' could not be loaded, is 'Inter-UI-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interUIItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'InterUI-Italic' could not be loaded, is 'Inter-UI-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interUIMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'InterUI-Medium' could not be loaded, is 'Inter-UI-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interUIMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'InterUI-MediumItalic' could not be loaded, is 'Inter-UI-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interUIRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'InterUI-Regular' could not be loaded, is 'Inter-UI-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.peIcon7Stroke(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Pe-icon-7-stroke' could not be loaded, is 'Pe-icon-7-stroke.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 115 images.
  struct image {
    /// Image `Alpha`.
    static let alpha = Rswift.ImageResource(bundle: R.hostingBundle, name: "Alpha")
    /// Image `BlackIpad`.
    static let blackIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlackIpad")
    /// Image `Black`.
    static let black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Black")
    /// Image `BlingIpad`.
    static let blingIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlingIpad")
    /// Image `Bling`.
    static let bling = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bling")
    /// Image `CloseButton`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloseButton")
    /// Image `EmptyTable0`.
    static let emptyTable0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EmptyTable0")
    /// Image `EmptyTable1`.
    static let emptyTable1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EmptyTable1")
    /// Image `EmptyTable2`.
    static let emptyTable2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EmptyTable2")
    /// Image `IconCollapse`.
    static let iconCollapse = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconCollapse")
    /// Image `Icon_action`.
    static let icon_action = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_action")
    /// Image `Icon_add`.
    static let icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_add")
    /// Image `Icon_best`.
    static let icon_best = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_best")
    /// Image `Icon_chat_bubble_filled`.
    static let icon_chat_bubble_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_chat_bubble_filled")
    /// Image `Icon_checkmark`.
    static let icon_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_checkmark")
    /// Image `Icon_chevron_right`.
    static let icon_chevron_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_chevron_right")
    /// Image `Icon_comment`.
    static let icon_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_comment")
    /// Image `Icon_controversal`.
    static let icon_controversal = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_controversal")
    /// Image `Icon_downvote`.
    static let icon_downvote = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_downvote")
    /// Image `Icon_drop_arrows`.
    static let icon_drop_arrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_drop_arrows")
    /// Image `Icon_dropdown`.
    static let icon_dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_dropdown")
    /// Image `Icon_edit`.
    static let icon_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_edit")
    /// Image `Icon_ellipsis`.
    static let icon_ellipsis = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_ellipsis")
    /// Image `Icon_favorite_empty`.
    static let icon_favorite_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_favorite_empty")
    /// Image `Icon_favorite_filled`.
    static let icon_favorite_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_favorite_filled")
    /// Image `Icon_filter`.
    static let icon_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_filter")
    /// Image `Icon_hidden`.
    static let icon_hidden = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_hidden")
    /// Image `Icon_hide`.
    static let icon_hide = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_hide")
    /// Image `Icon_hot`.
    static let icon_hot = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_hot")
    /// Image `Icon_info`.
    static let icon_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_info")
    /// Image `Icon_listing`.
    static let icon_listing = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_listing")
    /// Image `Icon_live`.
    static let icon_live = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_live")
    /// Image `Icon_mail_filled`.
    static let icon_mail_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_mail_filled")
    /// Image `Icon_mail_unread`.
    static let icon_mail_unread = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_mail_unread")
    /// Image `Icon_mail`.
    static let icon_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_mail")
    /// Image `Icon_manual_refresh`.
    static let icon_manual_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_manual_refresh")
    /// Image `Icon_new`.
    static let icon_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_new")
    /// Image `Icon_parentComment`.
    static let icon_parentComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_parentComment")
    /// Image `Icon_photoLibrary`.
    static let icon_photoLibrary = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_photoLibrary")
    /// Image `Icon_previewType`.
    static let icon_previewType = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_previewType")
    /// Image `Icon_reddit`.
    static let icon_reddit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_reddit")
    /// Image `Icon_reply`.
    static let icon_reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_reply")
    /// Image `Icon_report`.
    static let icon_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_report")
    /// Image `Icon_rising`.
    static let icon_rising = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_rising")
    /// Image `Icon_save_empty`.
    static let icon_save_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_save_empty")
    /// Image `Icon_save_fill`.
    static let icon_save_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_save_fill")
    /// Image `Icon_sent`.
    static let icon_sent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_sent")
    /// Image `Icon_settingsColor`.
    static let icon_settingsColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_settingsColor")
    /// Image `Icon_settings_appearance`.
    static let icon_settings_appearance = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_settings_appearance")
    /// Image `Icon_small_uparrow`.
    static let icon_small_uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_small_uparrow")
    /// Image `Icon_sort`.
    static let icon_sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_sort")
    /// Image `Icon_text_selection`.
    static let icon_text_selection = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_text_selection")
    /// Image `Icon_thumbnailType`.
    static let icon_thumbnailType = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_thumbnailType")
    /// Image `Icon_thumbnail_left`.
    static let icon_thumbnail_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_thumbnail_left")
    /// Image `Icon_thumbnail_right`.
    static let icon_thumbnail_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_thumbnail_right")
    /// Image `Icon_time`.
    static let icon_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_time")
    /// Image `Icon_top`.
    static let icon_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_top")
    /// Image `Icon_trash`.
    static let icon_trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_trash")
    /// Image `Icon_upvote`.
    static let icon_upvote = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_upvote")
    /// Image `Icon_videoPlayer`.
    static let icon_videoPlayer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_videoPlayer")
    /// Image `Icon_volume_off`.
    static let icon_volume_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_volume_off")
    /// Image `Icon_volume_on`.
    static let icon_volume_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_volume_on")
    /// Image `Icon_vote_left`.
    static let icon_vote_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_vote_left")
    /// Image `Icon_vote_right`.
    static let icon_vote_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_vote_right")
    /// Image `Icon_web`.
    static let icon_web = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_web")
    /// Image `KeyboardDismiss`.
    static let keyboardDismiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "KeyboardDismiss")
    /// Image `Keyboard`.
    static let keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Keyboard")
    /// Image `LaunchScreenIcon`.
    static let launchScreenIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreenIcon")
    /// Image `MaterialIpad`.
    static let materialIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "MaterialIpad")
    /// Image `Material`.
    static let material = Rswift.ImageResource(bundle: R.hostingBundle, name: "Material")
    /// Image `NeonIpad`.
    static let neonIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "NeonIpad")
    /// Image `Neon`.
    static let neon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Neon")
    /// Image `Neonipad`.
    static let neonipad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Neonipad")
    /// Image `Night SkyIpad`.
    static let nightSkyIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Night SkyIpad")
    /// Image `Night Sky`.
    static let nightSky = Rswift.ImageResource(bundle: R.hostingBundle, name: "Night Sky")
    /// Image `ParchmentIpad`.
    static let parchmentIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParchmentIpad")
    /// Image `Parchment`.
    static let parchment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Parchment")
    /// Image `Settings_Account`.
    static let settings_Account = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_Account")
    /// Image `Settings_FaceID`.
    static let settings_FaceID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_FaceID")
    /// Image `Settings_Filter`.
    static let settings_Filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_Filter")
    /// Image `Settings_Theme_Dark`.
    static let settings_Theme_Dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_Theme_Dark")
    /// Image `Settings_Theme_Light`.
    static let settings_Theme_Light = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_Theme_Light")
    /// Image `Settings_TouchID`.
    static let settings_TouchID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_TouchID")
    /// Image `ShadowIpad`.
    static let shadowIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShadowIpad")
    /// Image `Shadow`.
    static let shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shadow")
    /// Image `Subreddit_all`.
    static let subreddit_all = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_all")
    /// Image `Subreddit_favorite_blue`.
    static let subreddit_favorite_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_favorite_blue")
    /// Image `Subreddit_favorite_green`.
    static let subreddit_favorite_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_favorite_green")
    /// Image `Subreddit_favorite_orange`.
    static let subreddit_favorite_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_favorite_orange")
    /// Image `Subreddit_favorite_red`.
    static let subreddit_favorite_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_favorite_red")
    /// Image `Subreddit_favorite_yellow`.
    static let subreddit_favorite_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_favorite_yellow")
    /// Image `Subreddit_frontPage`.
    static let subreddit_frontPage = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_frontPage")
    /// Image `Subreddit_missing_icon`.
    static let subreddit_missing_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_missing_icon")
    /// Image `Subreddit_popular`.
    static let subreddit_popular = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_popular")
    /// Image `Subreddit_random`.
    static let subreddit_random = Rswift.ImageResource(bundle: R.hostingBundle, name: "Subreddit_random")
    /// Image `Table_Empty_Add`.
    static let table_Empty_Add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Table_Empty_Add")
    /// Image `iconCalendar`.
    static let iconCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCalendar")
    /// Image `iconEllipsisCircleSmall`.
    static let iconEllipsisCircleSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEllipsisCircleSmall")
    /// Image `iconEllipsisCircle`.
    static let iconEllipsisCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEllipsisCircle")
    /// Image `iconEyeFilled`.
    static let iconEyeFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEyeFilled")
    /// Image `iconMediaForward`.
    static let iconMediaForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMediaForward")
    /// Image `iconMediaPause`.
    static let iconMediaPause = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMediaPause")
    /// Image `iconMediaPlay`.
    static let iconMediaPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMediaPlay")
    /// Image `iconMediaReverse`.
    static let iconMediaReverse = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMediaReverse")
    /// Image `iconTimer`.
    static let iconTimer = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTimer")
    /// Image `iconUndo`.
    static let iconUndo = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUndo")
    /// Image `icon_user`.
    static let icon_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user")
    /// Image `longSwipeLeft`.
    static let longSwipeLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "longSwipeLeft")
    /// Image `longSwipeRight`.
    static let longSwipeRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "longSwipeRight")
    /// Image `shortSwipeLeft`.
    static let shortSwipeLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortSwipeLeft")
    /// Image `shortSwipeRight`.
    static let shortSwipeRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortSwipeRight")
    /// Image `volumePositionBottomLeft`.
    static let volumePositionBottomLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "volumePositionBottomLeft")
    /// Image `volumePositionBottomRight`.
    static let volumePositionBottomRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "volumePositionBottomRight")
    /// Image `volumePositionTopLeft`.
    static let volumePositionTopLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "volumePositionTopLeft")
    /// Image `volumePositionTopRight`.
    static let volumePositionTopRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "volumePositionTopRight")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Alpha", bundle: ..., traitCollection: ...)`
    static func alpha(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alpha, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Black", bundle: ..., traitCollection: ...)`
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BlackIpad", bundle: ..., traitCollection: ...)`
    static func blackIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bling", bundle: ..., traitCollection: ...)`
    static func bling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BlingIpad", bundle: ..., traitCollection: ...)`
    static func blingIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blingIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CloseButton", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EmptyTable0", bundle: ..., traitCollection: ...)`
    static func emptyTable0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyTable0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EmptyTable1", bundle: ..., traitCollection: ...)`
    static func emptyTable1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyTable1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EmptyTable2", bundle: ..., traitCollection: ...)`
    static func emptyTable2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyTable2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconCollapse", bundle: ..., traitCollection: ...)`
    static func iconCollapse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCollapse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_action", bundle: ..., traitCollection: ...)`
    static func icon_action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_action, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_add", bundle: ..., traitCollection: ...)`
    static func icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_best", bundle: ..., traitCollection: ...)`
    static func icon_best(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_best, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_chat_bubble_filled", bundle: ..., traitCollection: ...)`
    static func icon_chat_bubble_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chat_bubble_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_checkmark", bundle: ..., traitCollection: ...)`
    static func icon_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_chevron_right", bundle: ..., traitCollection: ...)`
    static func icon_chevron_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chevron_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_comment", bundle: ..., traitCollection: ...)`
    static func icon_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_controversal", bundle: ..., traitCollection: ...)`
    static func icon_controversal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_controversal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_downvote", bundle: ..., traitCollection: ...)`
    static func icon_downvote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_downvote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_drop_arrows", bundle: ..., traitCollection: ...)`
    static func icon_drop_arrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_drop_arrows, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_dropdown", bundle: ..., traitCollection: ...)`
    static func icon_dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dropdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_edit", bundle: ..., traitCollection: ...)`
    static func icon_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_ellipsis", bundle: ..., traitCollection: ...)`
    static func icon_ellipsis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ellipsis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_favorite_empty", bundle: ..., traitCollection: ...)`
    static func icon_favorite_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_favorite_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_favorite_filled", bundle: ..., traitCollection: ...)`
    static func icon_favorite_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_favorite_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_filter", bundle: ..., traitCollection: ...)`
    static func icon_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_hidden", bundle: ..., traitCollection: ...)`
    static func icon_hidden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hidden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_hide", bundle: ..., traitCollection: ...)`
    static func icon_hide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_hot", bundle: ..., traitCollection: ...)`
    static func icon_hot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_info", bundle: ..., traitCollection: ...)`
    static func icon_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_listing", bundle: ..., traitCollection: ...)`
    static func icon_listing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_listing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_live", bundle: ..., traitCollection: ...)`
    static func icon_live(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_live, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_mail", bundle: ..., traitCollection: ...)`
    static func icon_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_mail_filled", bundle: ..., traitCollection: ...)`
    static func icon_mail_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mail_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_mail_unread", bundle: ..., traitCollection: ...)`
    static func icon_mail_unread(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mail_unread, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_manual_refresh", bundle: ..., traitCollection: ...)`
    static func icon_manual_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_manual_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_new", bundle: ..., traitCollection: ...)`
    static func icon_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_parentComment", bundle: ..., traitCollection: ...)`
    static func icon_parentComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_parentComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_photoLibrary", bundle: ..., traitCollection: ...)`
    static func icon_photoLibrary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_photoLibrary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_previewType", bundle: ..., traitCollection: ...)`
    static func icon_previewType(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_previewType, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_reddit", bundle: ..., traitCollection: ...)`
    static func icon_reddit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reddit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_reply", bundle: ..., traitCollection: ...)`
    static func icon_reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_report", bundle: ..., traitCollection: ...)`
    static func icon_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_report, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_rising", bundle: ..., traitCollection: ...)`
    static func icon_rising(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rising, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_save_empty", bundle: ..., traitCollection: ...)`
    static func icon_save_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_save_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_save_fill", bundle: ..., traitCollection: ...)`
    static func icon_save_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_save_fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_sent", bundle: ..., traitCollection: ...)`
    static func icon_sent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_settingsColor", bundle: ..., traitCollection: ...)`
    static func icon_settingsColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settingsColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_settings_appearance", bundle: ..., traitCollection: ...)`
    static func icon_settings_appearance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings_appearance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_small_uparrow", bundle: ..., traitCollection: ...)`
    static func icon_small_uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_small_uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_sort", bundle: ..., traitCollection: ...)`
    static func icon_sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_text_selection", bundle: ..., traitCollection: ...)`
    static func icon_text_selection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_text_selection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_thumbnailType", bundle: ..., traitCollection: ...)`
    static func icon_thumbnailType(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_thumbnailType, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_thumbnail_left", bundle: ..., traitCollection: ...)`
    static func icon_thumbnail_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_thumbnail_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_thumbnail_right", bundle: ..., traitCollection: ...)`
    static func icon_thumbnail_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_thumbnail_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_time", bundle: ..., traitCollection: ...)`
    static func icon_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_top", bundle: ..., traitCollection: ...)`
    static func icon_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_trash", bundle: ..., traitCollection: ...)`
    static func icon_trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_upvote", bundle: ..., traitCollection: ...)`
    static func icon_upvote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_upvote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_videoPlayer", bundle: ..., traitCollection: ...)`
    static func icon_videoPlayer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_videoPlayer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_volume_off", bundle: ..., traitCollection: ...)`
    static func icon_volume_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_volume_on", bundle: ..., traitCollection: ...)`
    static func icon_volume_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_vote_left", bundle: ..., traitCollection: ...)`
    static func icon_vote_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vote_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_vote_right", bundle: ..., traitCollection: ...)`
    static func icon_vote_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vote_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_web", bundle: ..., traitCollection: ...)`
    static func icon_web(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_web, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Keyboard", bundle: ..., traitCollection: ...)`
    static func keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keyboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KeyboardDismiss", bundle: ..., traitCollection: ...)`
    static func keyboardDismiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keyboardDismiss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchScreenIcon", bundle: ..., traitCollection: ...)`
    static func launchScreenIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Material", bundle: ..., traitCollection: ...)`
    static func material(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.material, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MaterialIpad", bundle: ..., traitCollection: ...)`
    static func materialIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materialIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Neon", bundle: ..., traitCollection: ...)`
    static func neon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.neon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NeonIpad", bundle: ..., traitCollection: ...)`
    static func neonIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.neonIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Neonipad", bundle: ..., traitCollection: ...)`
    static func neonipad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.neonipad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Night Sky", bundle: ..., traitCollection: ...)`
    static func nightSky(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nightSky, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Night SkyIpad", bundle: ..., traitCollection: ...)`
    static func nightSkyIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nightSkyIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Parchment", bundle: ..., traitCollection: ...)`
    static func parchment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parchment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParchmentIpad", bundle: ..., traitCollection: ...)`
    static func parchmentIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parchmentIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_Account", bundle: ..., traitCollection: ...)`
    static func settings_Account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_Account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_FaceID", bundle: ..., traitCollection: ...)`
    static func settings_FaceID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_FaceID, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_Filter", bundle: ..., traitCollection: ...)`
    static func settings_Filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_Filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_Theme_Dark", bundle: ..., traitCollection: ...)`
    static func settings_Theme_Dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_Theme_Dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_Theme_Light", bundle: ..., traitCollection: ...)`
    static func settings_Theme_Light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_Theme_Light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_TouchID", bundle: ..., traitCollection: ...)`
    static func settings_TouchID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_TouchID, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shadow", bundle: ..., traitCollection: ...)`
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShadowIpad", bundle: ..., traitCollection: ...)`
    static func shadowIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadowIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_all", bundle: ..., traitCollection: ...)`
    static func subreddit_all(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_all, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_favorite_blue", bundle: ..., traitCollection: ...)`
    static func subreddit_favorite_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_favorite_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_favorite_green", bundle: ..., traitCollection: ...)`
    static func subreddit_favorite_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_favorite_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_favorite_orange", bundle: ..., traitCollection: ...)`
    static func subreddit_favorite_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_favorite_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_favorite_red", bundle: ..., traitCollection: ...)`
    static func subreddit_favorite_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_favorite_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_favorite_yellow", bundle: ..., traitCollection: ...)`
    static func subreddit_favorite_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_favorite_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_frontPage", bundle: ..., traitCollection: ...)`
    static func subreddit_frontPage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_frontPage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_missing_icon", bundle: ..., traitCollection: ...)`
    static func subreddit_missing_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_missing_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_popular", bundle: ..., traitCollection: ...)`
    static func subreddit_popular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_popular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Subreddit_random", bundle: ..., traitCollection: ...)`
    static func subreddit_random(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subreddit_random, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Table_Empty_Add", bundle: ..., traitCollection: ...)`
    static func table_Empty_Add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table_Empty_Add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCalendar", bundle: ..., traitCollection: ...)`
    static func iconCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCalendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEllipsisCircle", bundle: ..., traitCollection: ...)`
    static func iconEllipsisCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEllipsisCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEllipsisCircleSmall", bundle: ..., traitCollection: ...)`
    static func iconEllipsisCircleSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEllipsisCircleSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEyeFilled", bundle: ..., traitCollection: ...)`
    static func iconEyeFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEyeFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMediaForward", bundle: ..., traitCollection: ...)`
    static func iconMediaForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMediaForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMediaPause", bundle: ..., traitCollection: ...)`
    static func iconMediaPause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMediaPause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMediaPlay", bundle: ..., traitCollection: ...)`
    static func iconMediaPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMediaPlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMediaReverse", bundle: ..., traitCollection: ...)`
    static func iconMediaReverse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMediaReverse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTimer", bundle: ..., traitCollection: ...)`
    static func iconTimer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTimer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUndo", bundle: ..., traitCollection: ...)`
    static func iconUndo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUndo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_user", bundle: ..., traitCollection: ...)`
    static func icon_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "longSwipeLeft", bundle: ..., traitCollection: ...)`
    static func longSwipeLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.longSwipeLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "longSwipeRight", bundle: ..., traitCollection: ...)`
    static func longSwipeRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.longSwipeRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shortSwipeLeft", bundle: ..., traitCollection: ...)`
    static func shortSwipeLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shortSwipeLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shortSwipeRight", bundle: ..., traitCollection: ...)`
    static func shortSwipeRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shortSwipeRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volumePositionBottomLeft", bundle: ..., traitCollection: ...)`
    static func volumePositionBottomLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volumePositionBottomLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volumePositionBottomRight", bundle: ..., traitCollection: ...)`
    static func volumePositionBottomRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volumePositionBottomRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volumePositionTopLeft", bundle: ..., traitCollection: ...)`
    static func volumePositionTopLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volumePositionTopLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volumePositionTopRight", bundle: ..., traitCollection: ...)`
    static func volumePositionTopRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volumePositionTopRight, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct nsUserActivityTypes {
      static let comAdvancedappRedditSubredditVisit = infoPlistString(path: ["NSUserActivityTypes"], key: "com.advancedapp.Reddit.subredditVisit") ?? "com.advancedapp.Reddit.subredditVisit"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `IconRow`.
    static let iconRow = _R.nib._IconRow()
    /// Nib `MediaOverView`.
    static let mediaOverView = _R.nib._MediaOverView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IconRow", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iconRow) instead")
    static func iconRow(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconRow)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MediaOverView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mediaOverView) instead")
    static func mediaOverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mediaOverView)
    }
    #endif

    static func iconRow(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconCell? {
      return R.nib.iconRow.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconCell
    }

    static func mediaOverView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mediaOverView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AccountCell`.
    static let accountCell: Rswift.ReuseIdentifier<AccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "AccountCell")
    /// Reuse identifier `CommentThemeCell`.
    static let commentThemeCell: Rswift.ReuseIdentifier<CommentIndicatorTableViewCell> = Rswift.ReuseIdentifier(identifier: "CommentThemeCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<GroupThemeTableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 20 localization tables.
  struct string {
    /// This `R.string.album` struct is generated, and contains static references to 1 localization keys.
    struct album {
      /// Value: Error getting albums images.
      static let errorFetchingAlbum = Rswift.StringResource(key: "Error Fetching Album", tableName: "Album", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Error getting albums images.
      static func errorFetchingAlbum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error Fetching Album", tableName: "Album", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Album", preferredLanguages: preferredLanguages) else {
          return "Error Fetching Album"
        }

        return NSLocalizedString("Error Fetching Album", tableName: "Album", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.autoSave` struct is generated, and contains static references to 10 localization keys.
    struct autoSave {
      /// Value: No
      static let no = Rswift.StringResource(key: "No", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Okay
      static let okay = Rswift.StringResource(key: "Okay", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Oops
      static let postRestoreErrorTitle = Rswift.StringResource(key: "Post Restore Error Title", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reply Saved!
      static let commentSaved = Rswift.StringResource(key: "Comment Saved", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was a problem restoring your post, but the submission text has been saved to your clipboard if you'd like to continue.
      static let postRestoreErrorBody = Rswift.StringResource(key: "Post Restore Error Body", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsaved Post
      static let postTitle = Rswift.StringResource(key: "Post Title", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsaved Reply
      static let replyTitle = Rswift.StringResource(key: "Reply Title", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes
      static let yes = Rswift.StringResource(key: "Yes", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You had an unsaved post before the app closed. Would you like to continue making the post?
      static let postBody = Rswift.StringResource(key: "Post Body", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You had an unsaved reply before the app closed. Would you like to continue making the reply?
      static let replyBody = Rswift.StringResource(key: "Reply Body", tableName: "AutoSave", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: No
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: Okay
      static func okay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Okay", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Okay"
        }

        return NSLocalizedString("Okay", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: Oops
      static func postRestoreErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post Restore Error Title", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Post Restore Error Title"
        }

        return NSLocalizedString("Post Restore Error Title", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: Reply Saved!
      static func commentSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comment Saved", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Comment Saved"
        }

        return NSLocalizedString("Comment Saved", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: There was a problem restoring your post, but the submission text has been saved to your clipboard if you'd like to continue.
      static func postRestoreErrorBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post Restore Error Body", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Post Restore Error Body"
        }

        return NSLocalizedString("Post Restore Error Body", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: Unsaved Post
      static func postTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post Title", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Post Title"
        }

        return NSLocalizedString("Post Title", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: Unsaved Reply
      static func replyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reply Title", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Reply Title"
        }

        return NSLocalizedString("Reply Title", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: Yes
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: You had an unsaved post before the app closed. Would you like to continue making the post?
      static func postBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post Body", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Post Body"
        }

        return NSLocalizedString("Post Body", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      /// Value: You had an unsaved reply before the app closed. Would you like to continue making the reply?
      static func replyBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reply Body", tableName: "AutoSave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AutoSave", preferredLanguages: preferredLanguages) else {
          return "Reply Body"
        }

        return NSLocalizedString("Reply Body", tableName: "AutoSave", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.commentContext` struct is generated, and contains static references to 8 localization keys.
    struct commentContext {
      /// Value: Create Filter
      static let filterTitle = Rswift.StringResource(key: "filter title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let deleteTitle = Rswift.StringResource(key: "delete title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let editTitle = Rswift.StringResource(key: "edit title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remind Me
      static let remindTitle = Rswift.StringResource(key: "remind title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reply
      static let replyTitle = Rswift.StringResource(key: "reply title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select Text
      static let selectTextTitle = Rswift.StringResource(key: "select text title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let shareTitle = Rswift.StringResource(key: "share title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: u/%@
      static let userTitle = Rswift.StringResource(key: "user title", tableName: "CommentContext", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Create Filter
      static func filterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("filter title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "filter title"
        }

        return NSLocalizedString("filter title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func deleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "delete title"
        }

        return NSLocalizedString("delete title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: Edit
      static func editTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "edit title"
        }

        return NSLocalizedString("edit title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: Remind Me
      static func remindTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remind title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "remind title"
        }

        return NSLocalizedString("remind title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: Reply
      static func replyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reply title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "reply title"
        }

        return NSLocalizedString("reply title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: Select Text
      static func selectTextTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select text title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "select text title"
        }

        return NSLocalizedString("select text title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func shareTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "share title"
        }

        return NSLocalizedString("share title", tableName: "CommentContext", bundle: bundle, comment: "")
      }

      /// Value: u/%@
      static func userTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("user title", tableName: "CommentContext", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "CommentContext", preferredLanguages: preferredLanguages) else {
          return "user title"
        }

        let format = NSLocalizedString("user title", tableName: "CommentContext", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.linkHandler` struct is generated, and contains static references to 1 localization keys.
    struct linkHandler {
      /// Value: Could not find /r/%@
      static let subredditNotFound = Rswift.StringResource(key: "Subreddit not found", tableName: "LinkHandler", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Could not find /r/%@
      static func subredditNotFound(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Subreddit not found", tableName: "LinkHandler", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "LinkHandler", preferredLanguages: preferredLanguages) else {
          return "Subreddit not found"
        }

        let format = NSLocalizedString("Subreddit not found", tableName: "LinkHandler", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.link` struct is generated, and contains static references to 32 localization keys.
    struct link {
      /// Value:  in 
      static let inString = Rswift.StringResource(key: "in String", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add Comment
      static let addComment = Rswift.StringResource(key: "Add Comment", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Content Link
      static let shareContentLink = Rswift.StringResource(key: "Share Content Link", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create Filter
      static let filterTitle = Rswift.StringResource(key: "Filter Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let deleteTitle = Rswift.StringResource(key: "Delete Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Downvote
      static let downvote = Rswift.StringResource(key: "Downvote", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let editTitle = Rswift.StringResource(key: "Edit Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Post
      static let editPost = Rswift.StringResource(key: "Edit Post", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Failed to load comments. Please try again.
      static let failedToLoadCommentsMesage = Rswift.StringResource(key: "Failed to load comments mesage", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide
      static let hide = Rswift.StringResource(key: "Hide", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: It's quiet in here...
      static let noCommentsText = Rswift.StringResource(key: "No Comments Text", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Live Comments
      static let liveComments = Rswift.StringResource(key: "Live Comments", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading Link
      static let emptyLoadingTitle = Rswift.StringResource(key: "Empty Loading Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mark Above as Read
      static let markAboveAsRead = Rswift.StringResource(key: "Mark above as read", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reddit Post
      static let shareRedditPost = Rswift.StringResource(key: "Share Reddit Post", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remind Me
      static let remind = Rswift.StringResource(key: "Remind", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reply
      static let replyTitle = Rswift.StringResource(key: "Reply Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let save = Rswift.StringResource(key: "Save", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select Text
      static let selectModeTitle = Rswift.StringResource(key: "Select Mode Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select Text
      static let selectText = Rswift.StringResource(key: "Select Text", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select a post to load
      static let emptyNotSelectedTitle = Rswift.StringResource(key: "Empty Not Selected Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let shareTitle = Rswift.StringResource(key: "Share Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show
      static let show = Rswift.StringResource(key: "Show", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sort Comments
      static let sortComments = Rswift.StringResource(key: "Sort Comments", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error deleting your comment.
      static let deleteErrorMessage = Rswift.StringResource(key: "Delete Error Message", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Un-Downvote
      static let removeDownvote = Rswift.StringResource(key: "Remove Downvote", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Un-Upvote
      static let removeUpvote = Rswift.StringResource(key: "Remove Upvote", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsave
      static let unsave = Rswift.StringResource(key: "Unsave", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upvote
      static let upvote = Rswift.StringResource(key: "Upvote", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are viewing only a subset of the comments. Please tap here to load all the comments.
      static let voteCellLoadMore = Rswift.StringResource(key: "Vote Cell Load More", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: by 
      static let byPrefix = Rswift.StringResource(key: "by Prefix", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: u/%@
      static let authorTitle = Rswift.StringResource(key: "Author Title", tableName: "Link", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value:  in 
      static func inString(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("in String", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "in String"
        }

        return NSLocalizedString("in String", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Add Comment
      static func addComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Comment", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Add Comment"
        }

        return NSLocalizedString("Add Comment", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Content Link
      static func shareContentLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share Content Link", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Share Content Link"
        }

        return NSLocalizedString("Share Content Link", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Create Filter
      static func filterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Filter Title"
        }

        return NSLocalizedString("Filter Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func deleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Delete Title"
        }

        return NSLocalizedString("Delete Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Downvote
      static func downvote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Downvote", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Downvote"
        }

        return NSLocalizedString("Downvote", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Edit
      static func editTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Edit Title"
        }

        return NSLocalizedString("Edit Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Edit Post
      static func editPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Post", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Edit Post"
        }

        return NSLocalizedString("Edit Post", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Failed to load comments. Please try again.
      static func failedToLoadCommentsMesage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Failed to load comments mesage", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Failed to load comments mesage"
        }

        return NSLocalizedString("Failed to load comments mesage", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Hide
      static func hide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hide", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Hide"
        }

        return NSLocalizedString("Hide", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: It's quiet in here...
      static func noCommentsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Comments Text", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "No Comments Text"
        }

        return NSLocalizedString("No Comments Text", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Live Comments
      static func liveComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Live Comments", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Live Comments"
        }

        return NSLocalizedString("Live Comments", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Loading Link
      static func emptyLoadingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Empty Loading Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Empty Loading Title"
        }

        return NSLocalizedString("Empty Loading Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Mark Above as Read
      static func markAboveAsRead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mark above as read", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Mark above as read"
        }

        return NSLocalizedString("Mark above as read", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Reddit Post
      static func shareRedditPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share Reddit Post", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Share Reddit Post"
        }

        return NSLocalizedString("Share Reddit Post", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Remind Me
      static func remind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remind", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Remind"
        }

        return NSLocalizedString("Remind", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Reply
      static func replyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reply Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Reply Title"
        }

        return NSLocalizedString("Reply Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Select Text
      static func selectModeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Mode Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Select Mode Title"
        }

        return NSLocalizedString("Select Mode Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Select Text
      static func selectText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Text", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Select Text"
        }

        return NSLocalizedString("Select Text", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Select a post to load
      static func emptyNotSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Empty Not Selected Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Empty Not Selected Title"
        }

        return NSLocalizedString("Empty Not Selected Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func shareTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share Title", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Share Title"
        }

        return NSLocalizedString("Share Title", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Show
      static func show(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Show"
        }

        return NSLocalizedString("Show", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Sort Comments
      static func sortComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort Comments", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Sort Comments"
        }

        return NSLocalizedString("Sort Comments", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: There was an error deleting your comment.
      static func deleteErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Error Message", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Delete Error Message"
        }

        return NSLocalizedString("Delete Error Message", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Un-Downvote
      static func removeDownvote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remove Downvote", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Remove Downvote"
        }

        return NSLocalizedString("Remove Downvote", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Un-Upvote
      static func removeUpvote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remove Upvote", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Remove Upvote"
        }

        return NSLocalizedString("Remove Upvote", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Unsave
      static func unsave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unsave", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Unsave"
        }

        return NSLocalizedString("Unsave", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: Upvote
      static func upvote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upvote", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Upvote"
        }

        return NSLocalizedString("Upvote", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: You are viewing only a subset of the comments. Please tap here to load all the comments.
      static func voteCellLoadMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vote Cell Load More", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Vote Cell Load More"
        }

        return NSLocalizedString("Vote Cell Load More", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: by 
      static func byPrefix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by Prefix", tableName: "Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "by Prefix"
        }

        return NSLocalizedString("by Prefix", tableName: "Link", bundle: bundle, comment: "")
      }

      /// Value: u/%@
      static func authorTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Author Title", tableName: "Link", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Link", preferredLanguages: preferredLanguages) else {
          return "Author Title"
        }

        let format = NSLocalizedString("Author Title", tableName: "Link", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.listings` struct is generated, and contains static references to 17 localization keys.
    struct listings {
      /// Value: Cancel
      static let cancelDeleteTitle = Rswift.StringResource(key: "cancel delete title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copy post URL
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let deleteActionTitle = Rswift.StringResource(key: "Delete Action Title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error deleting post
      static let errorDeletingPost = Rswift.StringResource(key: "Error Deleting Post", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error hiding post
      static let errorHidingPost = Rswift.StringResource(key: "Error Hiding Post", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error saving post
      static let errorSavingPost = Rswift.StringResource(key: "Error Saving Post", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Filter This
      static let filterPostTitle = Rswift.StringResource(key: "Filter Post Title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide
      static let hidePostTitle = Rswift.StringResource(key: "Hide Post Title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let savePostTitle = Rswift.StringResource(key: "Save Post Title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save Successful
      static let saveSuccess = Rswift.StringResource(key: "Save Success", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error loading the posts.
      static let failedToLoadPosts = Rswift.StringResource(key: "Failed to load posts", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This post has been added to your hidden list. It won't appear any more after the next load.
      static let hideSuccess = Rswift.StringResource(key: "Hide success", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This post has been removed from your hidden list. It'll appear in your feed again on after the next load
      static let unhideSuccess = Rswift.StringResource(key: "unhide success", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This post was successfully deleted. Refresh to see it removed.
      static let deleteSuccess = Rswift.StringResource(key: "delete success", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unhide
      static let unhidePostTitle = Rswift.StringResource(key: "Unhide Post Title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsave
      static let unsavePostTitle = Rswift.StringResource(key: "Unsave Post Title", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsave Successful
      static let unsaveSuccess = Rswift.StringResource(key: "Unsave Success", tableName: "Listings", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Cancel
      static func cancelDeleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel delete title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "cancel delete title"
        }

        return NSLocalizedString("cancel delete title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Copy post URL
      static func copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Copy"
        }

        return NSLocalizedString("Copy", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func deleteActionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Action Title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Delete Action Title"
        }

        return NSLocalizedString("Delete Action Title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Error deleting post
      static func errorDeletingPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error Deleting Post", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Error Deleting Post"
        }

        return NSLocalizedString("Error Deleting Post", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Error hiding post
      static func errorHidingPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error Hiding Post", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Error Hiding Post"
        }

        return NSLocalizedString("Error Hiding Post", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Error saving post
      static func errorSavingPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error Saving Post", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Error Saving Post"
        }

        return NSLocalizedString("Error Saving Post", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Filter This
      static func filterPostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter Post Title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Filter Post Title"
        }

        return NSLocalizedString("Filter Post Title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Hide
      static func hidePostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hide Post Title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Hide Post Title"
        }

        return NSLocalizedString("Hide Post Title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func savePostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save Post Title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Save Post Title"
        }

        return NSLocalizedString("Save Post Title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Save Successful
      static func saveSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save Success", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Save Success"
        }

        return NSLocalizedString("Save Success", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: There was an error loading the posts.
      static func failedToLoadPosts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Failed to load posts", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Failed to load posts"
        }

        return NSLocalizedString("Failed to load posts", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: This post has been added to your hidden list. It won't appear any more after the next load.
      static func hideSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hide success", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Hide success"
        }

        return NSLocalizedString("Hide success", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: This post has been removed from your hidden list. It'll appear in your feed again on after the next load
      static func unhideSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unhide success", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "unhide success"
        }

        return NSLocalizedString("unhide success", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: This post was successfully deleted. Refresh to see it removed.
      static func deleteSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete success", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "delete success"
        }

        return NSLocalizedString("delete success", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Unhide
      static func unhidePostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unhide Post Title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Unhide Post Title"
        }

        return NSLocalizedString("Unhide Post Title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Unsave
      static func unsavePostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unsave Post Title", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Unsave Post Title"
        }

        return NSLocalizedString("Unsave Post Title", tableName: "Listings", bundle: bundle, comment: "")
      }

      /// Value: Unsave Successful
      static func unsaveSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unsave Success", tableName: "Listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Listings", preferredLanguages: preferredLanguages) else {
          return "Unsave Success"
        }

        return NSLocalizedString("Unsave Success", tableName: "Listings", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.liveComments` struct is generated, and contains static references to 4 localization keys.
    struct liveComments {
      /// Value: Allow Sleep
      static let idleDisabled = Rswift.StringResource(key: "Idle Disabled", tableName: "LiveComments", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Keep Awake
      static let idleEnabled = Rswift.StringResource(key: "Idle Enabled", tableName: "LiveComments", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Replying to comment by %@
      static let replyToUser = Rswift.StringResource(key: "Reply to user", tableName: "LiveComments", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Replying to reddit post.
      static let replyToPost = Rswift.StringResource(key: "Reply to Post", tableName: "LiveComments", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Allow Sleep
      static func idleDisabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Idle Disabled", tableName: "LiveComments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveComments", preferredLanguages: preferredLanguages) else {
          return "Idle Disabled"
        }

        return NSLocalizedString("Idle Disabled", tableName: "LiveComments", bundle: bundle, comment: "")
      }

      /// Value: Keep Awake
      static func idleEnabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Idle Enabled", tableName: "LiveComments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveComments", preferredLanguages: preferredLanguages) else {
          return "Idle Enabled"
        }

        return NSLocalizedString("Idle Enabled", tableName: "LiveComments", bundle: bundle, comment: "")
      }

      /// Value: Replying to comment by %@
      static func replyToUser(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Reply to user", tableName: "LiveComments", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "LiveComments", preferredLanguages: preferredLanguages) else {
          return "Reply to user"
        }

        let format = NSLocalizedString("Reply to user", tableName: "LiveComments", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Replying to reddit post.
      static func replyToPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reply to Post", tableName: "LiveComments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveComments", preferredLanguages: preferredLanguages) else {
          return "Reply to Post"
        }

        return NSLocalizedString("Reply to Post", tableName: "LiveComments", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.longPressHandlers` struct is generated, and contains static references to 7 localization keys.
    struct longPressHandlers {
      /// Value: Change playback speed
      static let changePlaybackSpeedAction = Rswift.StringResource(key: "change playback speed action", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error saving file to library
      static let saveToLibraryFailure = Rswift.StringResource(key: "save to library failure", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open in video player
      static let openInVideoPlayer = Rswift.StringResource(key: "open in video player", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open in web
      static let openInWebAction = Rswift.StringResource(key: "open in web action", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save to library
      static let saveToLibraryAction = Rswift.StringResource(key: "save to library action", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Saved!
      static let saveToLibrarySuccess = Rswift.StringResource(key: "save to library success", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let shareAction = Rswift.StringResource(key: "share action", tableName: "LongPressHandlers", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Change playback speed
      static func changePlaybackSpeedAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change playback speed action", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "change playback speed action"
        }

        return NSLocalizedString("change playback speed action", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      /// Value: Error saving file to library
      static func saveToLibraryFailure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save to library failure", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "save to library failure"
        }

        return NSLocalizedString("save to library failure", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      /// Value: Open in video player
      static func openInVideoPlayer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open in video player", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "open in video player"
        }

        return NSLocalizedString("open in video player", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      /// Value: Open in web
      static func openInWebAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open in web action", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "open in web action"
        }

        return NSLocalizedString("open in web action", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      /// Value: Save to library
      static func saveToLibraryAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save to library action", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "save to library action"
        }

        return NSLocalizedString("save to library action", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      /// Value: Saved!
      static func saveToLibrarySuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save to library success", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "save to library success"
        }

        return NSLocalizedString("save to library success", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func shareAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share action", tableName: "LongPressHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LongPressHandlers", preferredLanguages: preferredLanguages) else {
          return "share action"
        }

        return NSLocalizedString("share action", tableName: "LongPressHandlers", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.quickSwitch` struct is generated, and contains static references to 4 localization keys.
    struct quickSwitch {
      /// Value: Favorites
      static let favoriteSectionHeader = Rswift.StringResource(key: "Favorite Section Header", tableName: "QuickSwitch", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Feeds
      static let feedSectionHeader = Rswift.StringResource(key: "Feed Section Header", tableName: "QuickSwitch", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search Results
      static let searchResultsSectionHeader = Rswift.StringResource(key: "Search Results Section Header", tableName: "QuickSwitch", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subscribed
      static let subscribedSectionHeader = Rswift.StringResource(key: "Subscribed Section Header", tableName: "QuickSwitch", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Favorites
      static func favoriteSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favorite Section Header", tableName: "QuickSwitch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "QuickSwitch", preferredLanguages: preferredLanguages) else {
          return "Favorite Section Header"
        }

        return NSLocalizedString("Favorite Section Header", tableName: "QuickSwitch", bundle: bundle, comment: "")
      }

      /// Value: Feeds
      static func feedSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feed Section Header", tableName: "QuickSwitch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "QuickSwitch", preferredLanguages: preferredLanguages) else {
          return "Feed Section Header"
        }

        return NSLocalizedString("Feed Section Header", tableName: "QuickSwitch", bundle: bundle, comment: "")
      }

      /// Value: Search Results
      static func searchResultsSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Results Section Header", tableName: "QuickSwitch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "QuickSwitch", preferredLanguages: preferredLanguages) else {
          return "Search Results Section Header"
        }

        return NSLocalizedString("Search Results Section Header", tableName: "QuickSwitch", bundle: bundle, comment: "")
      }

      /// Value: Subscribed
      static func subscribedSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscribed Section Header", tableName: "QuickSwitch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "QuickSwitch", preferredLanguages: preferredLanguages) else {
          return "Subscribed Section Header"
        }

        return NSLocalizedString("Subscribed Section Header", tableName: "QuickSwitch", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.replyCreate` struct is generated, and contains static references to 13 localization keys.
    struct replyCreate {
      /// Value: Add comment
      static let titleAddComment = Rswift.StringResource(key: "title add comment", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to cancel?
      static let cancelCommentAlertMessage = Rswift.StringResource(key: "cancel comment alert message", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Comfirm Cancel
      static let cancelCommentAlertTitle = Rswift.StringResource(key: "cancel comment alert title", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Link
      static let titleEditLink = Rswift.StringResource(key: "title edit link", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit comment
      static let titleEditComment = Rswift.StringResource(key: "title edit comment", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error editing comment.
      static let errorEditingComment = Rswift.StringResource(key: "error editing comment", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error saving reply.
      static let errorSavingReply = Rswift.StringResource(key: "error saving reply", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error sending message
      static let errorSavingMessage = Rswift.StringResource(key: "error saving message", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Message reply
      static let titleMessageReply = Rswift.StringResource(key: "title message reply", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No
      static let cancelCommentNo = Rswift.StringResource(key: "cancel comment no", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reply to comment
      static let titleCommentReply = Rswift.StringResource(key: "title comment reply", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Replying to...
      static let replyingTo = Rswift.StringResource(key: "replying to", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes
      static let cancelCommentYes = Rswift.StringResource(key: "cancel comment yes", tableName: "ReplyCreate", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Add comment
      static func titleAddComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title add comment", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "title add comment"
        }

        return NSLocalizedString("title add comment", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Are you sure you want to cancel?
      static func cancelCommentAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel comment alert message", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "cancel comment alert message"
        }

        return NSLocalizedString("cancel comment alert message", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Comfirm Cancel
      static func cancelCommentAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel comment alert title", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "cancel comment alert title"
        }

        return NSLocalizedString("cancel comment alert title", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Edit Link
      static func titleEditLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title edit link", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "title edit link"
        }

        return NSLocalizedString("title edit link", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Edit comment
      static func titleEditComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title edit comment", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "title edit comment"
        }

        return NSLocalizedString("title edit comment", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Error editing comment.
      static func errorEditingComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error editing comment", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "error editing comment"
        }

        return NSLocalizedString("error editing comment", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Error saving reply.
      static func errorSavingReply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error saving reply", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "error saving reply"
        }

        return NSLocalizedString("error saving reply", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Error sending message
      static func errorSavingMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error saving message", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "error saving message"
        }

        return NSLocalizedString("error saving message", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Message reply
      static func titleMessageReply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title message reply", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "title message reply"
        }

        return NSLocalizedString("title message reply", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: No
      static func cancelCommentNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel comment no", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "cancel comment no"
        }

        return NSLocalizedString("cancel comment no", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Reply to comment
      static func titleCommentReply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title comment reply", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "title comment reply"
        }

        return NSLocalizedString("title comment reply", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Replying to...
      static func replyingTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("replying to", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "replying to"
        }

        return NSLocalizedString("replying to", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      /// Value: Yes
      static func cancelCommentYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel comment yes", tableName: "ReplyCreate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ReplyCreate", preferredLanguages: preferredLanguages) else {
          return "cancel comment yes"
        }

        return NSLocalizedString("cancel comment yes", tableName: "ReplyCreate", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.search` struct is generated, and contains static references to 5 localization keys.
    struct search {
      /// Value: Links
      static let linkSectionHeader = Rswift.StringResource(key: "link section header", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let searchViewControllerTitle = Rswift.StringResource(key: "search view controller title", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: See more...
      static let seeMore = Rswift.StringResource(key: "see more", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subreddits
      static let subredditSectionHeader = Rswift.StringResource(key: "subreddit section header", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User
      static let userSectionHeader = Rswift.StringResource(key: "user section header", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Links
      static func linkSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("link section header", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "link section header"
        }

        return NSLocalizedString("link section header", tableName: "Search", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func searchViewControllerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search view controller title", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "search view controller title"
        }

        return NSLocalizedString("search view controller title", tableName: "Search", bundle: bundle, comment: "")
      }

      /// Value: See more...
      static func seeMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("see more", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "see more"
        }

        return NSLocalizedString("see more", tableName: "Search", bundle: bundle, comment: "")
      }

      /// Value: Subreddits
      static func subredditSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subreddit section header", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "subreddit section header"
        }

        return NSLocalizedString("subreddit section header", tableName: "Search", bundle: bundle, comment: "")
      }

      /// Value: User
      static func userSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user section header", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "user section header"
        }

        return NSLocalizedString("user section header", tableName: "Search", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.selfTextContext` struct is generated, and contains static references to 2 localization keys.
    struct selfTextContext {
      /// Value: Add Comment
      static let addCommentTitle = Rswift.StringResource(key: "add comment title", tableName: "SelfTextContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select Text
      static let selectTextTitle = Rswift.StringResource(key: "select text title", tableName: "SelfTextContext", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Add Comment
      static func addCommentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add comment title", tableName: "SelfTextContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SelfTextContext", preferredLanguages: preferredLanguages) else {
          return "add comment title"
        }

        return NSLocalizedString("add comment title", tableName: "SelfTextContext", bundle: bundle, comment: "")
      }

      /// Value: Select Text
      static func selectTextTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select text title", tableName: "SelfTextContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SelfTextContext", preferredLanguages: preferredLanguages) else {
          return "select text title"
        }

        return NSLocalizedString("select text title", tableName: "SelfTextContext", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.settings` struct is generated, and contains static references to 122 localization keys.
    struct settings {
      /// Value: %d minutes
      static let intervalTiming = Rswift.StringResource(key: "interval timing", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %d seconds
      static let refreshDuration = Rswift.StringResource(key: "refresh duration", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About
      static let aboutSectionTitlte = Rswift.StringResource(key: "About Section Titlte", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Accounts
      static let accounts = Rswift.StringResource(key: "Accounts", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allow GIF scrolling
      static let allowGifScrollingRow = Rswift.StringResource(key: "allow gif scrolling row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Animation Type
      static let animationTypeRowText = Rswift.StringResource(key: "animation type row text", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Animation Type
      static let animationTypeTitle = Rswift.StringResource(key: "animation type title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: App Icon
      static let appIconRow = Rswift.StringResource(key: "app icon row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: App Settings
      static let appSettingsSectionTitle = Rswift.StringResource(key: "App Settings Section Title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Appearance
      static let appearance = Rswift.StringResource(key: "Appearance", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Appearance
      static let appearanceTitle = Rswift.StringResource(key: "appearance title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Application
      static let applicationSection = Rswift.StringResource(key: "application section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Auto hide media overview
      static let autoHideMediaOverviewRow = Rswift.StringResource(key: "auto hide media overview row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Auto mute videos
      static let autoMuteVideosRow = Rswift.StringResource(key: "auto mute videos row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Autoplay GIFs
      static let autoplayGifsRow = Rswift.StringResource(key: "autoplay gifs row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Autoplay GIFs on cellular
      static let autoplayGifsCellularRow = Rswift.StringResource(key: "autoplay gifs cellular row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Autoplay videos
      static let autoPlayRow = Rswift.StringResource(key: "auto play row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cache Settings
      static let cacheManagementTitle = Rswift.StringResource(key: "cache management title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cleared cache
      static let cacheClearedAlert = Rswift.StringResource(key: "cache cleared alert", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Comment navigator position
      static let commentNavPosition = Rswift.StringResource(key: "comment nav position", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Comments
      static let commentSection = Rswift.StringResource(key: "comment section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Comments
      static let commentSectionTitle = Rswift.StringResource(key: "comment section title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Compact
      static let compactThumbnailShort = Rswift.StringResource(key: "compact thumbnail short", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Compact thumbnail
      static let compactThumbnailType = Rswift.StringResource(key: "compact thumbnail type", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Configure Cache
      static let cacheRow = Rswift.StringResource(key: "cache row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Data Usage
      static let dataUsageSection = Rswift.StringResource(key: "data usage section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Default comment sort
      static let defaultCommentSort = Rswift.StringResource(key: "default comment sort", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Default post size
      static let defaultSizeRow = Rswift.StringResource(key: "default size row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Default post sort
      static let defaultPostSort = Rswift.StringResource(key: "default post sort", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Dim bright images
      static let dimBrightImageRow = Rswift.StringResource(key: "dim bright image row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Dim bright images will dim images when the app is in Dark Mode and your screen brightness is below half max brightness.
      static let extraSectionFooter = Rswift.StringResource(key: "extra section footer", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enable Haptic feedback
      static let enableHapticsRow = Rswift.StringResource(key: "enable haptics row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enable swipe gestures
      static let swipeEnabledRow = Rswift.StringResource(key: "swipe enabled row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Extra
      static let extraSection = Rswift.StringResource(key: "extra section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fast access side bar
      static let fastAccessRow = Rswift.StringResource(key: "fast access row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Filters
      static let filters = Rswift.StringResource(key: "Filters", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Flair
      static let flairSection = Rswift.StringResource(key: "flair section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Font
      static let fontRow = Rswift.StringResource(key: "font row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: General
      static let general = Rswift.StringResource(key: "General", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: General
      static let generalTitle = Rswift.StringResource(key: "general title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gestures
      static let swipeSectionTitle = Rswift.StringResource(key: "swipe section title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go To Subreddit
      static let goToSubreddit = Rswift.StringResource(key: "Go to subreddit", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to Settings
      static let settingsAction = Rswift.StringResource(key: "settings action", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide GIF progress
      static let hideGifProgressRow = Rswift.StringResource(key: "hide gif progress row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide a post title and vote buttons automatically when viewing media in the media viewer.
      static let autoHideMediaOverviewRowDescription = Rswift.StringResource(key: "auto hide media overview row description", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide all nsfw content
      static let hideNsfw = Rswift.StringResource(key: "hide nsfw", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide the gif progress indicator that appears in the top left corner of a GIF.
      static let hideGifProgressRowDetail = Rswift.StringResource(key: "hide gif progress row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide thumbnails
      static let thumbnailHiddenRow = Rswift.StringResource(key: "thumbnail hidden row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Indicator Theme
      static let indicatorThemeRow = Rswift.StringResource(key: "indicator theme row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Large preview
      static let largePreviewType = Rswift.StringResource(key: "large preview type", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Live Comments
      static let liveCommentTitle = Rswift.StringResource(key: "live comment title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Live Comments
      static let liveComments = Rswift.StringResource(key: "live comments", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading Animation
      static let loadingAnimationHeader = Rswift.StringResource(key: "loading animation header", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Manual fetch
      static let manualInterval = Rswift.StringResource(key: "manual interval", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Media
      static let mediaSectionTitle = Rswift.StringResource(key: "media section title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Message fetch interval
      static let fetchInterval = Rswift.StringResource(key: "fetch interval", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Messages
      static let messageSectionTitle = Rswift.StringResource(key: "message section title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notification for new messages
      static let notificationRow = Rswift.StringResource(key: "notification row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Number of comments to load
      static let numberOfComments = Rswift.StringResource(key: "number of comments", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Okay
      static let okayAction = Rswift.StringResource(key: "okay action", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open Source
      static let openSource = Rswift.StringResource(key: "Open Source", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open links in
      static let openLinksIn = Rswift.StringResource(key: "Open links in", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Other
      static let otherSectionTitle = Rswift.StringResource(key: "other section title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Passcode
      static let passcode = Rswift.StringResource(key: "Passcode", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Perform Search
      static let performSearch = Rswift.StringResource(key: "Perform search", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Permission Needed
      static let messagePermissionTitle = Rswift.StringResource(key: "message permission title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Posts
      static let postSection = Rswift.StringResource(key: "post section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Posts
      static let postSectionTitle = Rswift.StringResource(key: "post section title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Posts you read on this device will also be marked as read on other devices connected to the same iCloud account.
      static let syncIcloudRowDetail = Rswift.StringResource(key: "sync icloud row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prevent split view
      static let preventSplitviewRow = Rswift.StringResource(key: "prevent splitview row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Preview
      static let largePreviewShort = Rswift.StringResource(key: "large preview short", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Preview Mode
      static let previewSection = Rswift.StringResource(key: "preview section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Previewing marks read
      static let previewMarkReadRow = Rswift.StringResource(key: "preview mark read row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Privacy
      static let privacy = Rswift.StringResource(key: "Privacy", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pro Unlock
      static let proUnlockSectionTitle = Rswift.StringResource(key: "Pro Unlock Section Title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Refresh Interval
      static let refreshIntervalRowText = Rswift.StringResource(key: "refresh interval row text", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Refresh Rate
      static let refreshRateHeader = Rswift.StringResource(key: "refresh rate header", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save view type per subreddit
      static let saveViewTypeRow = Rswift.StringResource(key: "save view type row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Screen brightness
      static let screenBrightnessRow = Rswift.StringResource(key: "screen brightness row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let searchSectionTitle = Rswift.StringResource(key: "Search Section Title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settingsTitle = Rswift.StringResource(key: "Settings Title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show comment flair
      static let commentFlairRow = Rswift.StringResource(key: "comment flair row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show comment image flair
      static let commentFlairImageRow = Rswift.StringResource(key: "comment flair image row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show hide read button
      static let showHideReadRow = Rswift.StringResource(key: "show hide read row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show link flair
      static let linkFlairRow = Rswift.StringResource(key: "link flair row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show link image flair
      static let linkFlairImageRow = Rswift.StringResource(key: "link flair image row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show nsfw previews
      static let showNsfwRow = Rswift.StringResource(key: "show nsfw row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show spoilers
      static let showSpoilers = Rswift.StringResource(key: "show spoilers", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show title first
      static let titleFirstRow = Rswift.StringResource(key: "title first row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Split view size override
      static let splitSizeOverrideRow = Rswift.StringResource(key: "split size override row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start on subreddit
      static let startOnSubredditRow = Rswift.StringResource(key: "start on subreddit row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subreddit
      static let subreddit = Rswift.StringResource(key: "Subreddit", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subreddits
      static let subredditSectionTitle = Rswift.StringResource(key: "Subreddit Section Title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Swipe configuration
      static let swipeConfigureRow = Rswift.StringResource(key: "swipe configure row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sync read with iCloud
      static let syncIcloudRow = Rswift.StringResource(key: "sync icloud row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The app needs notification permission to display notifications.
      static let messagePermissionDetail = Rswift.StringResource(key: "message permission detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The app will use background fetch to find new messages. When a new message is detected, it will notify you
      static let notificationRowDetails = Rswift.StringResource(key: "notification row details", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The app will vibrate on sucess or failure when making an API request.
      static let enableHapticsRowDetail = Rswift.StringResource(key: "enable haptics row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Theme
      static let theme = Rswift.StringResource(key: "Theme", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Theme Settings
      static let themeTitle = Rswift.StringResource(key: "theme title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This is the time it takes to look for new comments.
      static let refreshRateFooter = Rswift.StringResource(key: "refresh rate footer", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thumbnail Mode
      static let thumbnailSection = Rswift.StringResource(key: "thumbnail section", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thumbnail side
      static let thumbnailSideRow = Rswift.StringResource(key: "thumbnail side row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thumbnail size
      static let thumbnailSizeRow = Rswift.StringResource(key: "thumbnail size row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unlock Pro
      static let proUnlockRowText = Rswift.StringResource(key: "Pro Unlock Row Text", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use large titles
      static let largeTitleRow = Rswift.StringResource(key: "large title row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use system large titles in the navigation bar.
      static let largeTitleRowDescription = Rswift.StringResource(key: "large title row description", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use the brightness of your screen to switch between light and dark themes.
      static let screenBrightnessDetail = Rswift.StringResource(key: "screen brightness detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use your finger to slide left or right on a GIF to fast forward or reverse it.
      static let allowGifScrollingRowDetail = Rswift.StringResource(key: "allow gif scrolling row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Volume Position
      static let volumePositionRow = Rswift.StringResource(key: "volume position row", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When a GIF has sound, where this setting determines where the mute / unmute button will be located.
      static let volumePositionRowDetail = Rswift.StringResource(key: "volume position row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When browsing a subreddit, a button will show allowing you to temporarily hide any posts you've already seen.
      static let showHideReadRowDetail = Rswift.StringResource(key: "show hide read row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When disabled, pixelated images of NSFW posts will be shown instead of the mature content.
      static let showNsfwRowDescription = Rswift.StringResource(key: "show nsfw row description", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When enabled, GIFs will automatically download and begin playing when they appear on screen.
      static let autoplayGifsRowDetail = Rswift.StringResource(key: "autoplay gifs row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When enabled, GIFs will autoplay on both WiFi networks and cellular. If disabled, you'll need to tap to start the download and play of GIFs when on cellular.
      static let autoplayGifsCellularRowDetail = Rswift.StringResource(key: "autoplay gifs cellular row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When enabled, if you prefer preview mode on one subreddit, but thumbnail mode on another, that preference will be saved for each subreddit.
      static let saveViewTypeRowDescription = Rswift.StringResource(key: "save view type row description", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When enabled, no posts marked NSFW will be shown.
      static let hideNsfwDetail = Rswift.StringResource(key: "hide nsfw detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When enabled, spoilers will not be hidden.
      static let showSpoilersDetail = Rswift.StringResource(key: "show spoilers detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When enabled, you can slide from the side of the screen to reveal the side bar of the current Subreddit. Note, you won't see this if there is no subreddit displayed, or if you're using a personal subreddit like r/all.
      static let fastAccessRowDetail = Rswift.StringResource(key: "fast access row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When preview mode is enabled, the post title will be displayed first.
      static let titleFirstRowDescription = Rswift.StringResource(key: "title first row description", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When previewing by long pressing a post, enabling this will mark that post as read.
      static let previewMarkReadDetail = Rswift.StringResource(key: "preview mark read detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When this setting is enabled, videos will play with the sound off. You'll need to un-mute them in the player.
      static let autoMuteVideosRowDetail = Rswift.StringResource(key: "auto mute videos row detail", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %d minutes
      static func intervalTiming(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("interval timing", tableName: "Settings", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "interval timing"
        }

        let format = NSLocalizedString("interval timing", tableName: "Settings", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %d seconds
      static func refreshDuration(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("refresh duration", tableName: "Settings", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "refresh duration"
        }

        let format = NSLocalizedString("refresh duration", tableName: "Settings", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: About
      static func aboutSectionTitlte(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About Section Titlte", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "About Section Titlte"
        }

        return NSLocalizedString("About Section Titlte", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Accounts
      static func accounts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Accounts", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Accounts"
        }

        return NSLocalizedString("Accounts", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Allow GIF scrolling
      static func allowGifScrollingRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow gif scrolling row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "allow gif scrolling row"
        }

        return NSLocalizedString("allow gif scrolling row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Animation Type
      static func animationTypeRowText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("animation type row text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "animation type row text"
        }

        return NSLocalizedString("animation type row text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Animation Type
      static func animationTypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("animation type title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "animation type title"
        }

        return NSLocalizedString("animation type title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: App Icon
      static func appIconRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app icon row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "app icon row"
        }

        return NSLocalizedString("app icon row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: App Settings
      static func appSettingsSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App Settings Section Title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "App Settings Section Title"
        }

        return NSLocalizedString("App Settings Section Title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Appearance
      static func appearance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Appearance", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Appearance"
        }

        return NSLocalizedString("Appearance", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Appearance
      static func appearanceTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appearance title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "appearance title"
        }

        return NSLocalizedString("appearance title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Application
      static func applicationSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("application section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "application section"
        }

        return NSLocalizedString("application section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Auto hide media overview
      static func autoHideMediaOverviewRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto hide media overview row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "auto hide media overview row"
        }

        return NSLocalizedString("auto hide media overview row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Auto mute videos
      static func autoMuteVideosRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto mute videos row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "auto mute videos row"
        }

        return NSLocalizedString("auto mute videos row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Autoplay GIFs
      static func autoplayGifsRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("autoplay gifs row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "autoplay gifs row"
        }

        return NSLocalizedString("autoplay gifs row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Autoplay GIFs on cellular
      static func autoplayGifsCellularRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("autoplay gifs cellular row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "autoplay gifs cellular row"
        }

        return NSLocalizedString("autoplay gifs cellular row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Autoplay videos
      static func autoPlayRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto play row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "auto play row"
        }

        return NSLocalizedString("auto play row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Cache Settings
      static func cacheManagementTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cache management title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "cache management title"
        }

        return NSLocalizedString("cache management title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Cleared cache
      static func cacheClearedAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cache cleared alert", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "cache cleared alert"
        }

        return NSLocalizedString("cache cleared alert", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Comment navigator position
      static func commentNavPosition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comment nav position", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "comment nav position"
        }

        return NSLocalizedString("comment nav position", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Comments
      static func commentSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comment section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "comment section"
        }

        return NSLocalizedString("comment section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Comments
      static func commentSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comment section title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "comment section title"
        }

        return NSLocalizedString("comment section title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Compact
      static func compactThumbnailShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("compact thumbnail short", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "compact thumbnail short"
        }

        return NSLocalizedString("compact thumbnail short", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Compact thumbnail
      static func compactThumbnailType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("compact thumbnail type", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "compact thumbnail type"
        }

        return NSLocalizedString("compact thumbnail type", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Configure Cache
      static func cacheRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cache row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "cache row"
        }

        return NSLocalizedString("cache row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Data Usage
      static func dataUsageSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("data usage section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "data usage section"
        }

        return NSLocalizedString("data usage section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Default comment sort
      static func defaultCommentSort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("default comment sort", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "default comment sort"
        }

        return NSLocalizedString("default comment sort", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Default post size
      static func defaultSizeRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("default size row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "default size row"
        }

        return NSLocalizedString("default size row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Default post sort
      static func defaultPostSort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("default post sort", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "default post sort"
        }

        return NSLocalizedString("default post sort", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Dim bright images
      static func dimBrightImageRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dim bright image row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "dim bright image row"
        }

        return NSLocalizedString("dim bright image row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Dim bright images will dim images when the app is in Dark Mode and your screen brightness is below half max brightness.
      static func extraSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("extra section footer", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "extra section footer"
        }

        return NSLocalizedString("extra section footer", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Enable Haptic feedback
      static func enableHapticsRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enable haptics row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "enable haptics row"
        }

        return NSLocalizedString("enable haptics row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Enable swipe gestures
      static func swipeEnabledRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("swipe enabled row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "swipe enabled row"
        }

        return NSLocalizedString("swipe enabled row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Extra
      static func extraSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("extra section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "extra section"
        }

        return NSLocalizedString("extra section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Fast access side bar
      static func fastAccessRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fast access row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "fast access row"
        }

        return NSLocalizedString("fast access row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Filters
      static func filters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filters", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Filters"
        }

        return NSLocalizedString("Filters", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Flair
      static func flairSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("flair section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "flair section"
        }

        return NSLocalizedString("flair section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Font
      static func fontRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("font row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "font row"
        }

        return NSLocalizedString("font row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: General
      static func general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "General"
        }

        return NSLocalizedString("General", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: General
      static func generalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "general title"
        }

        return NSLocalizedString("general title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Gestures
      static func swipeSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("swipe section title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "swipe section title"
        }

        return NSLocalizedString("swipe section title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Go To Subreddit
      static func goToSubreddit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go to subreddit", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Go to subreddit"
        }

        return NSLocalizedString("Go to subreddit", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Go to Settings
      static func settingsAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings action", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "settings action"
        }

        return NSLocalizedString("settings action", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Hide GIF progress
      static func hideGifProgressRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hide gif progress row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "hide gif progress row"
        }

        return NSLocalizedString("hide gif progress row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Hide a post title and vote buttons automatically when viewing media in the media viewer.
      static func autoHideMediaOverviewRowDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto hide media overview row description", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "auto hide media overview row description"
        }

        return NSLocalizedString("auto hide media overview row description", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Hide all nsfw content
      static func hideNsfw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hide nsfw", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "hide nsfw"
        }

        return NSLocalizedString("hide nsfw", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Hide the gif progress indicator that appears in the top left corner of a GIF.
      static func hideGifProgressRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hide gif progress row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "hide gif progress row detail"
        }

        return NSLocalizedString("hide gif progress row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Hide thumbnails
      static func thumbnailHiddenRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thumbnail hidden row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "thumbnail hidden row"
        }

        return NSLocalizedString("thumbnail hidden row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Indicator Theme
      static func indicatorThemeRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("indicator theme row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "indicator theme row"
        }

        return NSLocalizedString("indicator theme row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Large preview
      static func largePreviewType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("large preview type", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "large preview type"
        }

        return NSLocalizedString("large preview type", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Live Comments
      static func liveCommentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live comment title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "live comment title"
        }

        return NSLocalizedString("live comment title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Live Comments
      static func liveComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live comments", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "live comments"
        }

        return NSLocalizedString("live comments", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Loading Animation
      static func loadingAnimationHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading animation header", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "loading animation header"
        }

        return NSLocalizedString("loading animation header", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Manual fetch
      static func manualInterval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("manual interval", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "manual interval"
        }

        return NSLocalizedString("manual interval", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Media
      static func mediaSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("media section title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "media section title"
        }

        return NSLocalizedString("media section title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Message fetch interval
      static func fetchInterval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fetch interval", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "fetch interval"
        }

        return NSLocalizedString("fetch interval", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Messages
      static func messageSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message section title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "message section title"
        }

        return NSLocalizedString("message section title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Notification for new messages
      static func notificationRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "notification row"
        }

        return NSLocalizedString("notification row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Number of comments to load
      static func numberOfComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("number of comments", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "number of comments"
        }

        return NSLocalizedString("number of comments", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Okay
      static func okayAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("okay action", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "okay action"
        }

        return NSLocalizedString("okay action", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Open Source
      static func openSource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open Source", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Open Source"
        }

        return NSLocalizedString("Open Source", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Open links in
      static func openLinksIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open links in", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Open links in"
        }

        return NSLocalizedString("Open links in", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Other
      static func otherSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other section title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "other section title"
        }

        return NSLocalizedString("other section title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Passcode
      static func passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Passcode", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Passcode"
        }

        return NSLocalizedString("Passcode", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Perform Search
      static func performSearch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Perform search", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Perform search"
        }

        return NSLocalizedString("Perform search", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Permission Needed
      static func messagePermissionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message permission title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "message permission title"
        }

        return NSLocalizedString("message permission title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Posts
      static func postSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "post section"
        }

        return NSLocalizedString("post section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Posts
      static func postSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post section title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "post section title"
        }

        return NSLocalizedString("post section title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Posts you read on this device will also be marked as read on other devices connected to the same iCloud account.
      static func syncIcloudRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync icloud row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "sync icloud row detail"
        }

        return NSLocalizedString("sync icloud row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Prevent split view
      static func preventSplitviewRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prevent splitview row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "prevent splitview row"
        }

        return NSLocalizedString("prevent splitview row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Preview
      static func largePreviewShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("large preview short", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "large preview short"
        }

        return NSLocalizedString("large preview short", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Preview Mode
      static func previewSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "preview section"
        }

        return NSLocalizedString("preview section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Previewing marks read
      static func previewMarkReadRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview mark read row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "preview mark read row"
        }

        return NSLocalizedString("preview mark read row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Privacy
      static func privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Privacy"
        }

        return NSLocalizedString("Privacy", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Pro Unlock
      static func proUnlockSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pro Unlock Section Title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Pro Unlock Section Title"
        }

        return NSLocalizedString("Pro Unlock Section Title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Refresh Interval
      static func refreshIntervalRowText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refresh interval row text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "refresh interval row text"
        }

        return NSLocalizedString("refresh interval row text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Refresh Rate
      static func refreshRateHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refresh rate header", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "refresh rate header"
        }

        return NSLocalizedString("refresh rate header", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Save view type per subreddit
      static func saveViewTypeRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save view type row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "save view type row"
        }

        return NSLocalizedString("save view type row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Screen brightness
      static func screenBrightnessRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen brightness row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "screen brightness row"
        }

        return NSLocalizedString("screen brightness row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func searchSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Section Title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Search Section Title"
        }

        return NSLocalizedString("Search Section Title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func settingsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings Title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Settings Title"
        }

        return NSLocalizedString("Settings Title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show comment flair
      static func commentFlairRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comment flair row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "comment flair row"
        }

        return NSLocalizedString("comment flair row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show comment image flair
      static func commentFlairImageRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comment flair image row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "comment flair image row"
        }

        return NSLocalizedString("comment flair image row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show hide read button
      static func showHideReadRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show hide read row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "show hide read row"
        }

        return NSLocalizedString("show hide read row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show link flair
      static func linkFlairRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("link flair row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "link flair row"
        }

        return NSLocalizedString("link flair row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show link image flair
      static func linkFlairImageRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("link flair image row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "link flair image row"
        }

        return NSLocalizedString("link flair image row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show nsfw previews
      static func showNsfwRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show nsfw row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "show nsfw row"
        }

        return NSLocalizedString("show nsfw row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show spoilers
      static func showSpoilers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show spoilers", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "show spoilers"
        }

        return NSLocalizedString("show spoilers", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Show title first
      static func titleFirstRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title first row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "title first row"
        }

        return NSLocalizedString("title first row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Split view size override
      static func splitSizeOverrideRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("split size override row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "split size override row"
        }

        return NSLocalizedString("split size override row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Start on subreddit
      static func startOnSubredditRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start on subreddit row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "start on subreddit row"
        }

        return NSLocalizedString("start on subreddit row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Subreddit
      static func subreddit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subreddit", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Subreddit"
        }

        return NSLocalizedString("Subreddit", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Subreddits
      static func subredditSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subreddit Section Title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Subreddit Section Title"
        }

        return NSLocalizedString("Subreddit Section Title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Swipe configuration
      static func swipeConfigureRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("swipe configure row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "swipe configure row"
        }

        return NSLocalizedString("swipe configure row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Sync read with iCloud
      static func syncIcloudRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync icloud row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "sync icloud row"
        }

        return NSLocalizedString("sync icloud row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: The app needs notification permission to display notifications.
      static func messagePermissionDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message permission detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "message permission detail"
        }

        return NSLocalizedString("message permission detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: The app will use background fetch to find new messages. When a new message is detected, it will notify you
      static func notificationRowDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification row details", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "notification row details"
        }

        return NSLocalizedString("notification row details", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: The app will vibrate on sucess or failure when making an API request.
      static func enableHapticsRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enable haptics row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "enable haptics row detail"
        }

        return NSLocalizedString("enable haptics row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Theme
      static func theme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Theme", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Theme"
        }

        return NSLocalizedString("Theme", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Theme Settings
      static func themeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("theme title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "theme title"
        }

        return NSLocalizedString("theme title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: This is the time it takes to look for new comments.
      static func refreshRateFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refresh rate footer", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "refresh rate footer"
        }

        return NSLocalizedString("refresh rate footer", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Thumbnail Mode
      static func thumbnailSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thumbnail section", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "thumbnail section"
        }

        return NSLocalizedString("thumbnail section", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Thumbnail side
      static func thumbnailSideRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thumbnail side row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "thumbnail side row"
        }

        return NSLocalizedString("thumbnail side row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Thumbnail size
      static func thumbnailSizeRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thumbnail size row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "thumbnail size row"
        }

        return NSLocalizedString("thumbnail size row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Unlock Pro
      static func proUnlockRowText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pro Unlock Row Text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Pro Unlock Row Text"
        }

        return NSLocalizedString("Pro Unlock Row Text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Use large titles
      static func largeTitleRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("large title row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "large title row"
        }

        return NSLocalizedString("large title row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Use system large titles in the navigation bar.
      static func largeTitleRowDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("large title row description", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "large title row description"
        }

        return NSLocalizedString("large title row description", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Use the brightness of your screen to switch between light and dark themes.
      static func screenBrightnessDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen brightness detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "screen brightness detail"
        }

        return NSLocalizedString("screen brightness detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Use your finger to slide left or right on a GIF to fast forward or reverse it.
      static func allowGifScrollingRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow gif scrolling row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "allow gif scrolling row detail"
        }

        return NSLocalizedString("allow gif scrolling row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Volume Position
      static func volumePositionRow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volume position row", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "volume position row"
        }

        return NSLocalizedString("volume position row", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When a GIF has sound, where this setting determines where the mute / unmute button will be located.
      static func volumePositionRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volume position row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "volume position row detail"
        }

        return NSLocalizedString("volume position row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When browsing a subreddit, a button will show allowing you to temporarily hide any posts you've already seen.
      static func showHideReadRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show hide read row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "show hide read row detail"
        }

        return NSLocalizedString("show hide read row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When disabled, pixelated images of NSFW posts will be shown instead of the mature content.
      static func showNsfwRowDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show nsfw row description", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "show nsfw row description"
        }

        return NSLocalizedString("show nsfw row description", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When enabled, GIFs will automatically download and begin playing when they appear on screen.
      static func autoplayGifsRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("autoplay gifs row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "autoplay gifs row detail"
        }

        return NSLocalizedString("autoplay gifs row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When enabled, GIFs will autoplay on both WiFi networks and cellular. If disabled, you'll need to tap to start the download and play of GIFs when on cellular.
      static func autoplayGifsCellularRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("autoplay gifs cellular row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "autoplay gifs cellular row detail"
        }

        return NSLocalizedString("autoplay gifs cellular row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When enabled, if you prefer preview mode on one subreddit, but thumbnail mode on another, that preference will be saved for each subreddit.
      static func saveViewTypeRowDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save view type row description", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "save view type row description"
        }

        return NSLocalizedString("save view type row description", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When enabled, no posts marked NSFW will be shown.
      static func hideNsfwDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hide nsfw detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "hide nsfw detail"
        }

        return NSLocalizedString("hide nsfw detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When enabled, spoilers will not be hidden.
      static func showSpoilersDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show spoilers detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "show spoilers detail"
        }

        return NSLocalizedString("show spoilers detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When enabled, you can slide from the side of the screen to reveal the side bar of the current Subreddit. Note, you won't see this if there is no subreddit displayed, or if you're using a personal subreddit like r/all.
      static func fastAccessRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fast access row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "fast access row detail"
        }

        return NSLocalizedString("fast access row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When preview mode is enabled, the post title will be displayed first.
      static func titleFirstRowDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title first row description", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "title first row description"
        }

        return NSLocalizedString("title first row description", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When previewing by long pressing a post, enabling this will mark that post as read.
      static func previewMarkReadDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview mark read detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "preview mark read detail"
        }

        return NSLocalizedString("preview mark read detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: When this setting is enabled, videos will play with the sound off. You'll need to un-mute them in the player.
      static func autoMuteVideosRowDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto mute videos row detail", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "auto mute videos row detail"
        }

        return NSLocalizedString("auto mute videos row detail", tableName: "Settings", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.sideBar` struct is generated, and contains static references to 7 localization keys.
    struct sideBar {
      /// Value: %@ Active
      static let activeCount = Rswift.StringResource(key: "Active count", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ Subs
      static let subCount = Rswift.StringResource(key: "Sub count", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not load the sidebar
      static let errorLoading = Rswift.StringResource(key: "Error Loading", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Created: %@
      static let createdAt = Rswift.StringResource(key: "Created at", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sidebar
      static let title = Rswift.StringResource(key: "Title", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subscribe
      static let subscribeButton = Rswift.StringResource(key: "Subscribe Button", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsubscribe
      static let unsubscribeButton = Rswift.StringResource(key: "Unsubscribe Button", tableName: "SideBar", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %@ Active
      static func activeCount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Active count", tableName: "SideBar", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Active count"
        }

        let format = NSLocalizedString("Active count", tableName: "SideBar", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %@ Subs
      static func subCount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Sub count", tableName: "SideBar", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Sub count"
        }

        let format = NSLocalizedString("Sub count", tableName: "SideBar", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Could not load the sidebar
      static func errorLoading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error Loading", tableName: "SideBar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Error Loading"
        }

        return NSLocalizedString("Error Loading", tableName: "SideBar", bundle: bundle, comment: "")
      }

      /// Value: Created: %@
      static func createdAt(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Created at", tableName: "SideBar", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Created at"
        }

        let format = NSLocalizedString("Created at", tableName: "SideBar", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Sidebar
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title", tableName: "SideBar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Title"
        }

        return NSLocalizedString("Title", tableName: "SideBar", bundle: bundle, comment: "")
      }

      /// Value: Subscribe
      static func subscribeButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscribe Button", tableName: "SideBar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Subscribe Button"
        }

        return NSLocalizedString("Subscribe Button", tableName: "SideBar", bundle: bundle, comment: "")
      }

      /// Value: Unsubscribe
      static func unsubscribeButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unsubscribe Button", tableName: "SideBar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideBar", preferredLanguages: preferredLanguages) else {
          return "Unsubscribe Button"
        }

        return NSLocalizedString("Unsubscribe Button", tableName: "SideBar", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.sideMenu` struct is generated, and contains static references to 20 localization keys.
    struct sideMenu {
      /// Value: %d unread
      static let unreadCount = Rswift.StringResource(key: "unread count", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: General
      static let generalSectionTitle = Rswift.StringResource(key: "General Section Title", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to Subreddit
      static let goToSubreddit = Rswift.StringResource(key: "Go to Subreddit", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hidden
      static let hidden = Rswift.StringResource(key: "Hidden", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide NSFW content
      static let hideNSFWContent = Rswift.StringResource(key: "Hide NSFW Content", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log Out
      static let logOut = Rswift.StringResource(key: "Log Out", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Messages
      static let messages = Rswift.StringResource(key: "Messages", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Posts
      static let postSectionTitle = Rswift.StringResource(key: "Post Section Title", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let profile = Rswift.StringResource(key: "Profile", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Saved
      static let saved = Rswift.StringResource(key: "Saved", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let search = Rswift.StringResource(key: "Search", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settings = Rswift.StringResource(key: "Settings", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sidebar
      static let sidebar = Rswift.StringResource(key: "Sidebar", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign In
      static let signIn = Rswift.StringResource(key: "Sign In", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Submit
      static let submit = Rswift.StringResource(key: "Submit", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Submitted
      static let submitted = Rswift.StringResource(key: "Submitted", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subscribe
      static let subscribe = Rswift.StringResource(key: "Subscribe", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Toggle view mode
      static let toggleViewMode = Rswift.StringResource(key: "Toggle View Mode", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsubscribe
      static let unsubscribe = Rswift.StringResource(key: "Unsubscribe", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User
      static let defaultUserTitle = Rswift.StringResource(key: "Default User Title", tableName: "SideMenu", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %d unread
      static func unreadCount(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("unread count", tableName: "SideMenu", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "unread count"
        }

        let format = NSLocalizedString("unread count", tableName: "SideMenu", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: General
      static func generalSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General Section Title", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "General Section Title"
        }

        return NSLocalizedString("General Section Title", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Go to Subreddit
      static func goToSubreddit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go to Subreddit", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Go to Subreddit"
        }

        return NSLocalizedString("Go to Subreddit", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Hidden
      static func hidden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hidden", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Hidden"
        }

        return NSLocalizedString("Hidden", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Hide NSFW content
      static func hideNSFWContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hide NSFW Content", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Hide NSFW Content"
        }

        return NSLocalizedString("Hide NSFW Content", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Log Out
      static func logOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Log Out", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Log Out"
        }

        return NSLocalizedString("Log Out", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Messages
      static func messages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Messages", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Messages"
        }

        return NSLocalizedString("Messages", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Posts
      static func postSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post Section Title", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Post Section Title"
        }

        return NSLocalizedString("Post Section Title", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Profile
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Saved
      static func saved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Saved", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Saved"
        }

        return NSLocalizedString("Saved", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Sidebar
      static func sidebar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sidebar", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Sidebar"
        }

        return NSLocalizedString("Sidebar", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Sign In
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Sign In"
        }

        return NSLocalizedString("Sign In", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Submit
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Submitted
      static func submitted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submitted", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Submitted"
        }

        return NSLocalizedString("Submitted", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Subscribe
      static func subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscribe", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Subscribe"
        }

        return NSLocalizedString("Subscribe", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Toggle view mode
      static func toggleViewMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toggle View Mode", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Toggle View Mode"
        }

        return NSLocalizedString("Toggle View Mode", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: Unsubscribe
      static func unsubscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unsubscribe", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Unsubscribe"
        }

        return NSLocalizedString("Unsubscribe", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// Value: User
      static func defaultUserTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Default User Title", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Default User Title"
        }

        return NSLocalizedString("Default User Title", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.startup` struct is generated, and contains static references to 3 localization keys.
    struct startup {
      /// Value: Sign Out
      static let signOut = Rswift.StringResource(key: "Sign Out", tableName: "Startup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error loading your account information.
      static let userLoadFailedMessage = Rswift.StringResource(key: "User Load Failed Message", tableName: "Startup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Try Again
      static let tryAgain = Rswift.StringResource(key: "Try Again", tableName: "Startup", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Sign Out
      static func signOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign Out", tableName: "Startup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Startup", preferredLanguages: preferredLanguages) else {
          return "Sign Out"
        }

        return NSLocalizedString("Sign Out", tableName: "Startup", bundle: bundle, comment: "")
      }

      /// Value: There was an error loading your account information.
      static func userLoadFailedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Load Failed Message", tableName: "Startup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Startup", preferredLanguages: preferredLanguages) else {
          return "User Load Failed Message"
        }

        return NSLocalizedString("User Load Failed Message", tableName: "Startup", bundle: bundle, comment: "")
      }

      /// Value: Try Again
      static func tryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Try Again", tableName: "Startup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Startup", preferredLanguages: preferredLanguages) else {
          return "Try Again"
        }

        return NSLocalizedString("Try Again", tableName: "Startup", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.subredditContext` struct is generated, and contains static references to 7 localization keys.
    struct subredditContext {
      /// Value: Subscribe
      static let subscribeTitle = Rswift.StringResource(key: "subscribe title", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Successfully subscribed to r/%@
      static let subscribeSuccess = Rswift.StringResource(key: "subscribe success", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Successfully unsubscribed from r/%@
      static let unsubscribeSuccess = Rswift.StringResource(key: "unsubscribe success", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error updating your subscription.
      static let subscriptionError = Rswift.StringResource(key: "subscription error", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This subreddit does not have a sidebar.
      static let sidebarEmptyError = Rswift.StringResource(key: "sidebar empty error", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unsubscribe
      static let unsubscribeTitle = Rswift.StringResource(key: "unsubscribe title", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View Sidebar
      static let sidebarTitle = Rswift.StringResource(key: "sidebar title", tableName: "SubredditContext", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Subscribe
      static func subscribeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscribe title", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "subscribe title"
        }

        return NSLocalizedString("subscribe title", tableName: "SubredditContext", bundle: bundle, comment: "")
      }

      /// Value: Successfully subscribed to r/%@
      static func subscribeSuccess(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("subscribe success", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "subscribe success"
        }

        let format = NSLocalizedString("subscribe success", tableName: "SubredditContext", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Successfully unsubscribed from r/%@
      static func unsubscribeSuccess(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("unsubscribe success", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "unsubscribe success"
        }

        let format = NSLocalizedString("unsubscribe success", tableName: "SubredditContext", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: There was an error updating your subscription.
      static func subscriptionError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription error", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "subscription error"
        }

        return NSLocalizedString("subscription error", tableName: "SubredditContext", bundle: bundle, comment: "")
      }

      /// Value: This subreddit does not have a sidebar.
      static func sidebarEmptyError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sidebar empty error", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "sidebar empty error"
        }

        return NSLocalizedString("sidebar empty error", tableName: "SubredditContext", bundle: bundle, comment: "")
      }

      /// Value: Unsubscribe
      static func unsubscribeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unsubscribe title", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "unsubscribe title"
        }

        return NSLocalizedString("unsubscribe title", tableName: "SubredditContext", bundle: bundle, comment: "")
      }

      /// Value: View Sidebar
      static func sidebarTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sidebar title", tableName: "SubredditContext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditContext", preferredLanguages: preferredLanguages) else {
          return "sidebar title"
        }

        return NSLocalizedString("sidebar title", tableName: "SubredditContext", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.subredditList` struct is generated, and contains static references to 7 localization keys.
    struct subredditList {
      /// Value: Could not load /r/%@
      static let loadNameError = Rswift.StringResource(key: "load name error", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not load a random subreddit
      static let loadRandomError = Rswift.StringResource(key: "load random error", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create New Feed
      static let createNewFeed = Rswift.StringResource(key: "Create new feed", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Favorites
      static let favoriteSectionHeader = Rswift.StringResource(key: "favorite section header", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subreddits
      static let viewControllerTitle = Rswift.StringResource(key: "View controller title", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tap the star on any subreddit to add to your favorites.
      static let favoriteInstructions = Rswift.StringResource(key: "Favorite Instructions", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error deleting this feed
      static let feedDeleteError = Rswift.StringResource(key: "feed delete error", tableName: "SubredditList", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Could not load /r/%@
      static func loadNameError(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("load name error", tableName: "SubredditList", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "load name error"
        }

        let format = NSLocalizedString("load name error", tableName: "SubredditList", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Could not load a random subreddit
      static func loadRandomError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("load random error", tableName: "SubredditList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "load random error"
        }

        return NSLocalizedString("load random error", tableName: "SubredditList", bundle: bundle, comment: "")
      }

      /// Value: Create New Feed
      static func createNewFeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create new feed", tableName: "SubredditList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "Create new feed"
        }

        return NSLocalizedString("Create new feed", tableName: "SubredditList", bundle: bundle, comment: "")
      }

      /// Value: Favorites
      static func favoriteSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favorite section header", tableName: "SubredditList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "favorite section header"
        }

        return NSLocalizedString("favorite section header", tableName: "SubredditList", bundle: bundle, comment: "")
      }

      /// Value: Subreddits
      static func viewControllerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View controller title", tableName: "SubredditList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "View controller title"
        }

        return NSLocalizedString("View controller title", tableName: "SubredditList", bundle: bundle, comment: "")
      }

      /// Value: Tap the star on any subreddit to add to your favorites.
      static func favoriteInstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favorite Instructions", tableName: "SubredditList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "Favorite Instructions"
        }

        return NSLocalizedString("Favorite Instructions", tableName: "SubredditList", bundle: bundle, comment: "")
      }

      /// Value: There was an error deleting this feed
      static func feedDeleteError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feed delete error", tableName: "SubredditList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SubredditList", preferredLanguages: preferredLanguages) else {
          return "feed delete error"
        }

        return NSLocalizedString("feed delete error", tableName: "SubredditList", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.uiKitExtensions` struct is generated, and contains static references to 14 localization keys.
    struct uiKitExtensions {
      /// Value: Advanced does not have permission to access your photos. You can change this in settings.
      static let photoPermissionMessage = Rswift.StringResource(key: "Photo permission message", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancelButton = Rswift.StringResource(key: "Cancel button", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not complete the operation. Please try again.
      static let genericErrorMessage = Rswift.StringResource(key: "Generic Error Message", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Not Now
      static let notNowButton = Rswift.StringResource(key: "Not now button", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Not Signed In
      static let notSignedIn = Rswift.StringResource(key: "Not Signed In", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Okay
      static let okButton = Rswift.StringResource(key: "Ok button", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open Settings
      static let openSettingsButton = Rswift.StringResource(key: "Open settings button", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Permission Needed
      static let permissionNeeded = Rswift.StringResource(key: "Permission Needed", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pro Mode
      static let proMode = Rswift.StringResource(key: "Pro Mode", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign In
      static let signInButton = Rswift.StringResource(key: "Sign in button", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error.
      static let genericErrorToast = Rswift.StringResource(key: "Generic Error Toast", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upgrade
      static let upgradeButton = Rswift.StringResource(key: "Upgrade button", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You need to be signed in to do this.
      static let notSignedInMessage = Rswift.StringResource(key: "Not signed in message", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You need to upgrade to Pro to unlock this feature.
      static let proUpgradeMessage = Rswift.StringResource(key: "Pro upgrade message", tableName: "UIKitExtensions", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Advanced does not have permission to access your photos. You can change this in settings.
      static func photoPermissionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photo permission message", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Photo permission message"
        }

        return NSLocalizedString("Photo permission message", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func cancelButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel button", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Cancel button"
        }

        return NSLocalizedString("Cancel button", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Could not complete the operation. Please try again.
      static func genericErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Generic Error Message", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Generic Error Message"
        }

        return NSLocalizedString("Generic Error Message", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Not Now
      static func notNowButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not now button", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Not now button"
        }

        return NSLocalizedString("Not now button", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Not Signed In
      static func notSignedIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not Signed In", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Not Signed In"
        }

        return NSLocalizedString("Not Signed In", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Okay
      static func okButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok button", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Ok button"
        }

        return NSLocalizedString("Ok button", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Open Settings
      static func openSettingsButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open settings button", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Open settings button"
        }

        return NSLocalizedString("Open settings button", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Permission Needed
      static func permissionNeeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Permission Needed", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Permission Needed"
        }

        return NSLocalizedString("Permission Needed", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Pro Mode
      static func proMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pro Mode", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Pro Mode"
        }

        return NSLocalizedString("Pro Mode", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Sign In
      static func signInButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign in button", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Sign in button"
        }

        return NSLocalizedString("Sign in button", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: There was an error.
      static func genericErrorToast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Generic Error Toast", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Generic Error Toast"
        }

        return NSLocalizedString("Generic Error Toast", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: Upgrade
      static func upgradeButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upgrade button", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Upgrade button"
        }

        return NSLocalizedString("Upgrade button", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: You need to be signed in to do this.
      static func notSignedInMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not signed in message", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Not signed in message"
        }

        return NSLocalizedString("Not signed in message", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      /// Value: You need to upgrade to Pro to unlock this feature.
      static func proUpgradeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pro upgrade message", tableName: "UIKitExtensions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UIKitExtensions", preferredLanguages: preferredLanguages) else {
          return "Pro upgrade message"
        }

        return NSLocalizedString("Pro upgrade message", tableName: "UIKitExtensions", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.userPreview` struct is generated, and contains static references to 3 localization keys.
    struct userPreview {
      /// Value: Comment karma: %@
      static let commentKarma = Rswift.StringResource(key: "comment karma", tableName: "UserPreview", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Link karma: %@
      static let postKarma = Rswift.StringResource(key: "post karma", tableName: "UserPreview", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Redditor since: %@
      static let age = Rswift.StringResource(key: "age", tableName: "UserPreview", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Comment karma: %@
      static func commentKarma(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("comment karma", tableName: "UserPreview", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "UserPreview", preferredLanguages: preferredLanguages) else {
          return "comment karma"
        }

        let format = NSLocalizedString("comment karma", tableName: "UserPreview", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Link karma: %@
      static func postKarma(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("post karma", tableName: "UserPreview", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "UserPreview", preferredLanguages: preferredLanguages) else {
          return "post karma"
        }

        let format = NSLocalizedString("post karma", tableName: "UserPreview", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Redditor since: %@
      static func age(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("age", tableName: "UserPreview", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "UserPreview", preferredLanguages: preferredLanguages) else {
          return "age"
        }

        let format = NSLocalizedString("age", tableName: "UserPreview", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MediaOverView.validate()
    }

    struct _IconRow: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IconRow"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconCell
      }

      fileprivate init() {}
    }

    struct _MediaOverView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MediaOverView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon_action", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon_action' is used in nib 'MediaOverView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try cacheSize.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try font.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try linkSubmission.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reminders.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settingsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try submitContainer.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try swipeConfiguration.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try textSubmission.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct cacheSize: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cacheSizeViewController = StoryboardViewControllerResource<CacheSizeTableViewController>(identifier: "CacheSizeViewController")
      let name = "CacheSize"

      func cacheSizeViewController(_: Void = ()) -> CacheSizeTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cacheSizeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Off Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Off Red' is used in storyboard 'CacheSize', but couldn't be loaded.") }
        }
        if _R.storyboard.cacheSize().cacheSizeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cacheSizeViewController' could not be loaded from storyboard 'CacheSize' as 'CacheSizeTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct font: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fontSettings = StoryboardViewControllerResource<FontSettingsTableViewController>(identifier: "FontSettings")
      let name = "Font"

      func fontSettings(_: Void = ()) -> FontSettingsTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fontSettings)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.font().fontSettings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fontSettings' could not be loaded from storyboard 'Font' as 'FontSettingsTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreenIcon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct linkSubmission: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let controller = StoryboardViewControllerResource<LinkSubmissionViewController>(identifier: "controller")
      let name = "LinkSubmission"

      func controller(_: Void = ()) -> LinkSubmissionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: controller)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.linkSubmission().controller() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'controller' could not be loaded from storyboard 'LinkSubmission' as 'LinkSubmissionViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reminders: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Reminders"
      let reminderViewController = StoryboardViewControllerResource<ReminderTimeViewController>(identifier: "ReminderViewController")

      func reminderViewController(_: Void = ()) -> ReminderTimeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reminderViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.reminders().reminderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reminderViewController' could not be loaded from storyboard 'Reminders' as 'ReminderTimeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settingsStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountsViewController = StoryboardViewControllerResource<AccountsViewController>(identifier: "AccountsViewController")
      let bundle = R.hostingBundle
      let commentIndicator = StoryboardViewControllerResource<CommentIndicatorTableViewController>(identifier: "CommentIndicator")
      let name = "SettingsStoryboard"

      func accountsViewController(_: Void = ()) -> AccountsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountsViewController)
      }

      func commentIndicator(_: Void = ()) -> CommentIndicatorTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentIndicator)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon_checkmark' is used in storyboard 'SettingsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.settingsStoryboard().accountsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountsViewController' could not be loaded from storyboard 'SettingsStoryboard' as 'AccountsViewController'.") }
        if _R.storyboard.settingsStoryboard().commentIndicator() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentIndicator' could not be loaded from storyboard 'SettingsStoryboard' as 'CommentIndicatorTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct submitContainer: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let controller = StoryboardViewControllerResource<SubmitContainerViewController>(identifier: "controller")
      let name = "SubmitContainer"

      func controller(_: Void = ()) -> SubmitContainerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: controller)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.submitContainer().controller() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'controller' could not be loaded from storyboard 'SubmitContainer' as 'SubmitContainerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct swipeConfiguration: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SwipeConfiguration"
      let swipeList = StoryboardViewControllerResource<SwipeConfigurationViewController>(identifier: "SwipeList")

      func swipeList(_: Void = ()) -> SwipeConfigurationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: swipeList)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "longSwipeLeft", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'longSwipeLeft' is used in storyboard 'SwipeConfiguration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "longSwipeRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'longSwipeRight' is used in storyboard 'SwipeConfiguration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shortSwipeLeft", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shortSwipeLeft' is used in storyboard 'SwipeConfiguration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shortSwipeRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shortSwipeRight' is used in storyboard 'SwipeConfiguration', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.swipeConfiguration().swipeList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'swipeList' could not be loaded from storyboard 'SwipeConfiguration' as 'SwipeConfigurationViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct textSubmission: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let controller = StoryboardViewControllerResource<Reddit.TextSubmissionViewController>(identifier: "controller")
      let name = "TextSubmission"

      func controller(_: Void = ()) -> Reddit.TextSubmissionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: controller)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.textSubmission().controller() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'controller' could not be loaded from storyboard 'TextSubmission' as 'Reddit.TextSubmissionViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
